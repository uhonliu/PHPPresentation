{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"PHPPresentation is a library written in pure PHP that provides a set of classes to write to different presentation file formats, i.e. Microsoft Office Open XML ( .pptx ) and OASIS Open Document Format for Office Applications ( .odp ). PHPPresentation is an open source project licensed under the terms of LGPL version 3 . PHPPresentation is aimed to be a high quality software product by incorporating continuous integration and unit testing . You can learn more about PHPPresentation by reading this Developers' Documentation. Features Create an in-memory presentation representation Set presentation meta data (author, title, description, etc) Add slides from scratch or from existing one Supports different fonts and font styles Supports different formatting, styles, fills, gradients Supports hyperlinks and rich-text strings Add images with different styles (positioning, rotation, shadow) Set printing options (header, footer, page margins, paper size, orientation) Output to different file formats: PowerPoint 2007 (.pptx), OpenDocument Presentation (.odp), Serialized Spreadsheet) ... and lots of other things! File formats Below are the supported features for each file formats. Writers Features HTML ODP PDF PPTX Document Mark as final Document Properties Standard Custom Slides Name Element Shape Image Hyperlink Line MemoryImage RichText Table Text Charts Bar3D Line Pie3D Scatter Readers Features HTML ODP PDF PPT PPTX Document Mark as final Document Properties Standard Custom Slides Name Element Shape Image Hyperlink RichText Table Text Charts Bar3D Line Pie3D Scatter Contributing We welcome everyone to contribute to PHPPresentation. Below are some of the things that you can do to contribute: Read our contributing guide Fork us and request a pull to the develop branch Submit bug reports or feature requests to GitHub Follow @PHPOffice on Twitter","title":"Introduction"},{"location":"index.html#_1","text":"PHPPresentation is a library written in pure PHP that provides a set of classes to write to different presentation file formats, i.e. Microsoft Office Open XML ( .pptx ) and OASIS Open Document Format for Office Applications ( .odp ). PHPPresentation is an open source project licensed under the terms of LGPL version 3 . PHPPresentation is aimed to be a high quality software product by incorporating continuous integration and unit testing . You can learn more about PHPPresentation by reading this Developers' Documentation.","title":""},{"location":"index.html#features","text":"Create an in-memory presentation representation Set presentation meta data (author, title, description, etc) Add slides from scratch or from existing one Supports different fonts and font styles Supports different formatting, styles, fills, gradients Supports hyperlinks and rich-text strings Add images with different styles (positioning, rotation, shadow) Set printing options (header, footer, page margins, paper size, orientation) Output to different file formats: PowerPoint 2007 (.pptx), OpenDocument Presentation (.odp), Serialized Spreadsheet) ... and lots of other things!","title":"Features"},{"location":"index.html#file-formats","text":"Below are the supported features for each file formats.","title":"File formats"},{"location":"index.html#writers","text":"Features HTML ODP PDF PPTX Document Mark as final Document Properties Standard Custom Slides Name Element Shape Image Hyperlink Line MemoryImage RichText Table Text Charts Bar3D Line Pie3D Scatter","title":"Writers"},{"location":"index.html#readers","text":"Features HTML ODP PDF PPT PPTX Document Mark as final Document Properties Standard Custom Slides Name Element Shape Image Hyperlink RichText Table Text Charts Bar3D Line Pie3D Scatter","title":"Readers"},{"location":"index.html#contributing","text":"We welcome everyone to contribute to PHPPresentation. Below are some of the things that you can do to contribute: Read our contributing guide Fork us and request a pull to the develop branch Submit bug reports or feature requests to GitHub Follow @PHPOffice on Twitter","title":"Contributing"},{"location":"credits.html","text":"Credits Images from chart page come from the LibreOffice Core . Some definitions come from the Office Open XML . References OpenXML Known as \"ISO/IEC 29500, Third edition, 2012-09-01\" ISO : Part 1: Fundamentals and Markup Language Reference Part 2: Open Packaging Conventions Part 3: Markup Compatibility and Extensibility Part 4: Transitional Migration Features MSDN : PowerPoint Viewer DocumentFormat.OpenXml.Presentation Namespace on MSDN Open XML SDK 2.5 with Validator Library of Congress : OOXML Format Family -- ISO/IEC 29500 and ECMA 376 Schemas in W3C XML Schema language and in RELAX NG for the Strict variant of PPTX, etc. OpenDocument Oasis OpenDocument Standard Version 1.2 PowerPoint 97 MS-PPT: PowerPoint (.ppt) Binary File Format OffVis : Microsoft Tool for reading PPT files","title":"Credits"},{"location":"credits.html#credits","text":"Images from chart page come from the LibreOffice Core . Some definitions come from the Office Open XML .","title":"Credits"},{"location":"credits.html#references","text":"","title":"References"},{"location":"credits.html#openxml","text":"Known as \"ISO/IEC 29500, Third edition, 2012-09-01\" ISO : Part 1: Fundamentals and Markup Language Reference Part 2: Open Packaging Conventions Part 3: Markup Compatibility and Extensibility Part 4: Transitional Migration Features MSDN : PowerPoint Viewer DocumentFormat.OpenXml.Presentation Namespace on MSDN Open XML SDK 2.5 with Validator Library of Congress : OOXML Format Family -- ISO/IEC 29500 and ECMA 376 Schemas in W3C XML Schema language and in RELAX NG for the Strict variant of PPTX, etc.","title":"OpenXML"},{"location":"credits.html#opendocument","text":"Oasis OpenDocument Standard Version 1.2","title":"OpenDocument"},{"location":"credits.html#powerpoint-97","text":"MS-PPT: PowerPoint (.ppt) Binary File Format OffVis : Microsoft Tool for reading PPT files","title":"PowerPoint 97"},{"location":"faq.html","text":"Frequently asked questions Is this the same with PHPPowerPoint that I found in CodePlex? No. This one is much better with tons of new features that you can\u2019t find in PHPPowerPoint 0.1. The development in CodePlex is halted and switched to GitHub to allow more participation from the crowd. The more the merrier, right? I\u2019ve been running PHPPowerPoint from CodePlex flawlessly, but I can\u2019t use the latest PHPPresentation from GitHub. Why? PHPPresentation requires PHP 5.3+ since v0.2 , while PHPPowerPoint v0.1 from CodePlex can run with PHP 5.2 . There\u2019s a lot of new features that we can get from PHP 5.3 and it\u2019s been around since 2009! You should upgrade your PHP version to use PHPPresentation v0.2+ . Why am I getting a class not found error? If you have followed the instructions for either adding this package to your composer.json or registering the autoloader, then perhaps you forgot to include a use statement for the class(es) you are trying to access. Here's an example that allows you to refer to the MemoryDrawing class without having to specify the full class name in your code: <?php use PhpOffice\\PhpPresentation\\Shape\\MemoryDrawing as MemoryDrawing ; If you have followed the installation instructions and you have added the necessary use statements to your code, then maybe you are still referencing the PHPPowerPoint classes using the old PEAR/PSR-0 approach. The 0.1 approach to naming classes used verbose class names to avoid namespace collisions with other libraries. For example, the MemoryDrawing class was actually called PHPPowerPoint_Shape_MemoryDrawing . Version 0.2 of the library renamed the classes, moved to a namespaced approach and switched to the PSR-0 autoloader. Interestingly, old code that was still referencing classes using the verbose approach still worked (which was pretty cool!). This is because the PSR-0 autoloader was correctly translating the verbose class references into the correct file name and location. However, PHPPowerPoint now relies exclusively on the PSR-4 autoloader, so old code that may have been referencing the classes with the verbose class names will need to be updated accordingly. Why PHPPowerPoint become PHPPresentation ? As Roman Syroeshko noticed us , PowerPoint is a trademark . For avoiding any problems with Microsoft, we decide to change the name to a more logic name, with our panel of readers/writers.","title":"FAQ"},{"location":"faq.html#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq.html#is-this-the-same-with-phppowerpoint-that-i-found-in-codeplex","text":"No. This one is much better with tons of new features that you can\u2019t find in PHPPowerPoint 0.1. The development in CodePlex is halted and switched to GitHub to allow more participation from the crowd. The more the merrier, right?","title":"Is this the same with PHPPowerPoint that I found in CodePlex?"},{"location":"faq.html#ive-been-running-phppowerpoint-from-codeplex-flawlessly-but-i-cant-use-the-latest-phppresentation-from-github-why","text":"PHPPresentation requires PHP 5.3+ since v0.2 , while PHPPowerPoint v0.1 from CodePlex can run with PHP 5.2 . There\u2019s a lot of new features that we can get from PHP 5.3 and it\u2019s been around since 2009! You should upgrade your PHP version to use PHPPresentation v0.2+ .","title":"I\u2019ve been running PHPPowerPoint from CodePlex flawlessly, but I can\u2019t use the latest PHPPresentation from GitHub. Why?"},{"location":"faq.html#why-am-i-getting-a-class-not-found-error","text":"If you have followed the instructions for either adding this package to your composer.json or registering the autoloader, then perhaps you forgot to include a use statement for the class(es) you are trying to access. Here's an example that allows you to refer to the MemoryDrawing class without having to specify the full class name in your code: <?php use PhpOffice\\PhpPresentation\\Shape\\MemoryDrawing as MemoryDrawing ; If you have followed the installation instructions and you have added the necessary use statements to your code, then maybe you are still referencing the PHPPowerPoint classes using the old PEAR/PSR-0 approach. The 0.1 approach to naming classes used verbose class names to avoid namespace collisions with other libraries. For example, the MemoryDrawing class was actually called PHPPowerPoint_Shape_MemoryDrawing . Version 0.2 of the library renamed the classes, moved to a namespaced approach and switched to the PSR-0 autoloader. Interestingly, old code that was still referencing classes using the verbose approach still worked (which was pretty cool!). This is because the PSR-0 autoloader was correctly translating the verbose class references into the correct file name and location. However, PHPPowerPoint now relies exclusively on the PSR-4 autoloader, so old code that may have been referencing the classes with the verbose class names will need to be updated accordingly.","title":"Why am I getting a class not found error?"},{"location":"faq.html#why-phppowerpoint-become-phppresentation","text":"As Roman Syroeshko noticed us , PowerPoint is a trademark . For avoiding any problems with Microsoft, we decide to change the name to a more logic name, with our panel of readers/writers.","title":"Why PHPPowerPoint become PHPPresentation ?"},{"location":"install.html","text":"Installation Requirements Mandatory: PHP 5.3+ PHP ZIP extension PHP XML Parser extension Optional: PHP XMLWriter extension Installation There are two ways to install PHPPresentation, i.e. via Composer or manually by downloading the library. Using Composer To install via Composer, add the following lines to your composer.json : { \"require\" : { \"phpoffice/phppresentation\" : \"dev-master\" } } Using manual install To install manually: download PHPOffice\\PHPPresentation package from GitHub download PHPOffice\\Common package from GitHub extract the package and put the contents to your machine. <?php require_once 'path/to/PhpPresentation/src/PhpPresentation/Autoloader.php' ; \\PhpOffice\\PhpPresentation\\Autoloader :: register (); require_once 'path/to/PhpOffice/Common/src/Common/Autoloader.php' ; \\PhpOffice\\Common\\Autoloader :: register (); Samples After installation, you can browse and use the samples that we've provided, either by command line or using browser. If you can access your PHPPresentation library folder using browser, point your browser to the samples folder, e.g. http://localhost/PhpPresentation/samples/ .","title":"Install"},{"location":"install.html#installation","text":"","title":"Installation"},{"location":"install.html#requirements","text":"Mandatory: PHP 5.3+ PHP ZIP extension PHP XML Parser extension Optional: PHP XMLWriter extension","title":"Requirements"},{"location":"install.html#installation_1","text":"There are two ways to install PHPPresentation, i.e. via Composer or manually by downloading the library.","title":"Installation"},{"location":"install.html#using-composer","text":"To install via Composer, add the following lines to your composer.json : { \"require\" : { \"phpoffice/phppresentation\" : \"dev-master\" } }","title":"Using Composer"},{"location":"install.html#using-manual-install","text":"To install manually: download PHPOffice\\PHPPresentation package from GitHub download PHPOffice\\Common package from GitHub extract the package and put the contents to your machine. <?php require_once 'path/to/PhpPresentation/src/PhpPresentation/Autoloader.php' ; \\PhpOffice\\PhpPresentation\\Autoloader :: register (); require_once 'path/to/PhpOffice/Common/src/Common/Autoloader.php' ; \\PhpOffice\\Common\\Autoloader :: register ();","title":"Using manual install"},{"location":"install.html#samples","text":"After installation, you can browse and use the samples that we've provided, either by command line or using browser. If you can access your PHPPresentation library folder using browser, point your browser to the samples folder, e.g. http://localhost/PhpPresentation/samples/ .","title":"Samples"},{"location":"changes/0.1.0.html","text":"0.1.0 Create a Presentation object Add one or more Slide objects Add one or more Shapes to Slide objects Text Shapes Image Shapes Export Presentation object to PowerPoint 2007 OpenXML format","title":"0.1.0"},{"location":"changes/0.1.0.html#010","text":"Create a Presentation object Add one or more Slide objects Add one or more Shapes to Slide objects Text Shapes Image Shapes Export Presentation object to PowerPoint 2007 OpenXML format","title":"0.1.0"},{"location":"changes/0.2.0.html","text":"0.2.0 - 2014-07-22 Features Provide fluent interfaces where possible - @maartenba CP-815 Use existing presentation template when writing PPTX file - @maartenba CP-1034 Implement bullet and numeric lists - @maartenba CP-1093 getProperties: setCompany feature request - @maartenba CP-1173 New shape type: table - @maartenba CP-1375 Use of CDATA text when writing text - @maartenba CP-2804 Possibility to set borders on tables and table cells - @maartenba CP-1378 Access to additional properties of Text Boxes - @maartenba CP-4921 Applied patch 7010 - @maartenba CP-7010 Applied patch 7020 - @maartenba CP-7020 Add a hyperlink to an image or textbox - @maartenba CP-1196 PowerPoint Charts - @maartenba CP-4953 Editing chart data - @maartenba CP-5580 Solid Fill support - @maartenba CP-5461 Applied patch 8375 - @maartenba CP-8375 Implement autoloader - @MarkBaker ODPresentation Writer : Implement Basic Writer - @Progi1984 GH-1 ODPresentation Writer : Implement Support of Charts - @Progi1984 GH-33 ODPresentation Writer : Implement Support of Lines - @Progi1984 GH-30 ODPresentation Writer : Implement Support of Tables - @Progi1984 GH-31 PowerPoint2007 Writer : Implement Support of Fill - @Progi1984 GH-32 Bugfix Allow solid color fill - @MarkBaker Table width setting Office 2007 - @maartenba CP-3910 Bullet characters in Master Slide Layouts of template file become corrupted - @maartenba CP-4598 Generated files cannot be opened in Office 08 for Mac OSX - @maartenba CP-3424 Table Cell Borders Not Displaying Correctly - @maartenba CP-2541 Multiple Master Slides are not supported - @maartenba CP-4597 Images in Layouts other than first Master Slide within Template file causes corrupted PPTX - @maartenba CP-4596 Fixed A3 and A4 formats dimensions - @delphiki GH-16 Fixed custom document layout - @delphiki GH-18 Filename parameter is required for IWriter::save method - @sapfeer0k GH-19 DocumentLayout: Fix incorrect variable assignment - @kaiesh GH-6 Hyperlink: Wrong input parameter object type in setHyperlink - @nynka GH-23 ODPresentation Writer: ODP writer is locale sensitive in the wrong places - @Progi1984 GH-21 ODPresentation Writer: Display InMemory Image - @Progi1984 GH-29 PowerPoint2007 Writer: Bar3D doesn't display - @Progi1984 GH-32 PowerPoint2007 Writer: Changed PowerPoint2007 writer attributes to protected - @delphiki GH-20 PowerPoint2007 Writer: Scatter chart with numerical X values not working well - @Progi1984 GH-3 Shape RichText: Support of Vertical Alignment in PowerPoint2007 - @Progi1984 GH-35 Miscellaneous Rename PHPPowerpoint.php to PHPPowerPoint.php - @maartenba CP-1165 Create build script using Phing - @maartenba CP-5270 QA: Prepare .travis.yml and phpcs.xml for Travis build passing - @Progi1984 @ivanlanin QA: Initiate unit tests - @Progi1984 @ivanlanin QA: Cleanup source code for PSR dan PHPDoc compatibility - @ivanlanin QA: Unit Tests - @Progi1984 & @ivanlanin Doc: Initiate documentation - @ivanlanin Doc: Move to Read The Docs - @Progi1984 Refactor: Change PHPPowerPoint_Shape_Shadow to PHPPowerPoint_Style_Shadow because it's a style, not a shape - @ivanlanin Refactor: Change PHPPowerPoint_SlideIterator to PHPPowerPoint_Slide_Iterator - @ivanlanin","title":"0.2.0"},{"location":"changes/0.2.0.html#020-2014-07-22","text":"","title":"0.2.0 - 2014-07-22"},{"location":"changes/0.2.0.html#features","text":"Provide fluent interfaces where possible - @maartenba CP-815 Use existing presentation template when writing PPTX file - @maartenba CP-1034 Implement bullet and numeric lists - @maartenba CP-1093 getProperties: setCompany feature request - @maartenba CP-1173 New shape type: table - @maartenba CP-1375 Use of CDATA text when writing text - @maartenba CP-2804 Possibility to set borders on tables and table cells - @maartenba CP-1378 Access to additional properties of Text Boxes - @maartenba CP-4921 Applied patch 7010 - @maartenba CP-7010 Applied patch 7020 - @maartenba CP-7020 Add a hyperlink to an image or textbox - @maartenba CP-1196 PowerPoint Charts - @maartenba CP-4953 Editing chart data - @maartenba CP-5580 Solid Fill support - @maartenba CP-5461 Applied patch 8375 - @maartenba CP-8375 Implement autoloader - @MarkBaker ODPresentation Writer : Implement Basic Writer - @Progi1984 GH-1 ODPresentation Writer : Implement Support of Charts - @Progi1984 GH-33 ODPresentation Writer : Implement Support of Lines - @Progi1984 GH-30 ODPresentation Writer : Implement Support of Tables - @Progi1984 GH-31 PowerPoint2007 Writer : Implement Support of Fill - @Progi1984 GH-32","title":"Features"},{"location":"changes/0.2.0.html#bugfix","text":"Allow solid color fill - @MarkBaker Table width setting Office 2007 - @maartenba CP-3910 Bullet characters in Master Slide Layouts of template file become corrupted - @maartenba CP-4598 Generated files cannot be opened in Office 08 for Mac OSX - @maartenba CP-3424 Table Cell Borders Not Displaying Correctly - @maartenba CP-2541 Multiple Master Slides are not supported - @maartenba CP-4597 Images in Layouts other than first Master Slide within Template file causes corrupted PPTX - @maartenba CP-4596 Fixed A3 and A4 formats dimensions - @delphiki GH-16 Fixed custom document layout - @delphiki GH-18 Filename parameter is required for IWriter::save method - @sapfeer0k GH-19 DocumentLayout: Fix incorrect variable assignment - @kaiesh GH-6 Hyperlink: Wrong input parameter object type in setHyperlink - @nynka GH-23 ODPresentation Writer: ODP writer is locale sensitive in the wrong places - @Progi1984 GH-21 ODPresentation Writer: Display InMemory Image - @Progi1984 GH-29 PowerPoint2007 Writer: Bar3D doesn't display - @Progi1984 GH-32 PowerPoint2007 Writer: Changed PowerPoint2007 writer attributes to protected - @delphiki GH-20 PowerPoint2007 Writer: Scatter chart with numerical X values not working well - @Progi1984 GH-3 Shape RichText: Support of Vertical Alignment in PowerPoint2007 - @Progi1984 GH-35","title":"Bugfix"},{"location":"changes/0.2.0.html#miscellaneous","text":"Rename PHPPowerpoint.php to PHPPowerPoint.php - @maartenba CP-1165 Create build script using Phing - @maartenba CP-5270 QA: Prepare .travis.yml and phpcs.xml for Travis build passing - @Progi1984 @ivanlanin QA: Initiate unit tests - @Progi1984 @ivanlanin QA: Cleanup source code for PSR dan PHPDoc compatibility - @ivanlanin QA: Unit Tests - @Progi1984 & @ivanlanin Doc: Initiate documentation - @ivanlanin Doc: Move to Read The Docs - @Progi1984 Refactor: Change PHPPowerPoint_Shape_Shadow to PHPPowerPoint_Style_Shadow because it's a style, not a shape - @ivanlanin Refactor: Change PHPPowerPoint_SlideIterator to PHPPowerPoint_Slide_Iterator - @ivanlanin","title":"Miscellaneous"},{"location":"changes/0.3.0.html","text":"0.3.0 - 2014-09-22 Features PowerPoint97 Reader : Implement Basic Reader - @Progi1984 GH-15 ODPresentation Writer : Ability to set auto shrink text - @Progi1984 GH-28 Make package PSR-4 compliant. Autoload classes by composer out of the box - @Djuki GH-41 Bugfix PowerPoint2007 Writer : Powerpoint Repair Error in Office 2010 - @Progi1984 GH-39 PowerPoint2007 Writer : BUG: Repair Error / Wrong anchor if you don't set vertical alignment different to VERTICAL_BASE - @fregge GH-42 PowerPoint2007 Writer : Keynote incompatibility - @catrane CP#237322 / @Progi1984 GH-46 Miscellaneous QA : Move AbstractType for Chart - @Progi1984 QA : Unit Tests - @Progi1984","title":"0.3.0"},{"location":"changes/0.3.0.html#030-2014-09-22","text":"","title":"0.3.0 - 2014-09-22"},{"location":"changes/0.3.0.html#features","text":"PowerPoint97 Reader : Implement Basic Reader - @Progi1984 GH-15 ODPresentation Writer : Ability to set auto shrink text - @Progi1984 GH-28 Make package PSR-4 compliant. Autoload classes by composer out of the box - @Djuki GH-41","title":"Features"},{"location":"changes/0.3.0.html#bugfix","text":"PowerPoint2007 Writer : Powerpoint Repair Error in Office 2010 - @Progi1984 GH-39 PowerPoint2007 Writer : BUG: Repair Error / Wrong anchor if you don't set vertical alignment different to VERTICAL_BASE - @fregge GH-42 PowerPoint2007 Writer : Keynote incompatibility - @catrane CP#237322 / @Progi1984 GH-46","title":"Bugfix"},{"location":"changes/0.3.0.html#miscellaneous","text":"QA : Move AbstractType for Chart - @Progi1984 QA : Unit Tests - @Progi1984","title":"Miscellaneous"},{"location":"changes/0.4.0.html","text":"0.4.0 - 2015-07-07 Features Added support for grouping shapes together in a Group - @Pr0phet GH-68 Added support for calculating the offset and extent on a Slide. - @Pr0phet GH-68 Added support for Horizontal bar chart - @rdoepke @Progi1984 GH-58 Added support for hyperlink on picture (ODPresentation & PowerPoint2007) - @Progi1984 GH-49 Added support for hyperlink on richtext (PowerPoint2007) - @JewrassicPark GH-49 Added support for notes slide (ODPresentation & PowerPoint2007) - @Progi1984 @JewrassicPark GH-63 Added option for explosion in Pie3D Chart (ODPresentation & PowerPoint2007) - @Progi1984 GH-76 ODPresentation Writer : Support for fill in RichText - @Progi1984 GH-79 ODPresentation Writer : Support for border style in RichText - @Progi1984 GH-79 ODPresentation Writer : Support for Area Chart - @Progi1984 GH-82 PowerPoint2007 Writer : Support for Area Chart - @Progi1984 GH-82 ODPresentation Writer : Support for Bar Chart - @Progi1984 GH-82 PowerPoint2007 Writer : Support for Bar Chart - @Progi1984 GH-82 Added units in DocumentLayout - @Progi1984 GH-87 Added support for transitions between slides - @Progi1984 ODPresentation Writer : Support for Pie Chart & Stack Percent Bar Charts - @jrking4 GH-108 PowerPoint2007 Writer : Support for Pie Chart & Stack Percent Bar Charts - @jrking4 GH-108 Bugfix PSR-0 via composer broken - @Progi1984 GH-51 ODPresentation Writer : Title in Legend in chart doesn't displayed - @Progi1984 GH-79 ODPresentation Writer : Segments in Pie3D Chart are now in clockwise order, as in PowerPoint2007 Writer - @Progi1984 GH-79 ODPresentation Writer : Axis in Line Chart have not tick marks displayed, as in PowerPoint2007 Writer - @Progi1984 GH-79 ODPresentation Writer : Shadow don't work for RichTextShapes - @Progi1984 GH-81 PowerPoint2007 Writer : Fill don't work for RichTextShapes - @Progi1984 GH-61 PowerPoint2007 Writer : Border don't work for RichTextShapes - @Progi1984 GH-61 PowerPoint2007 Writer : Hyperlink in table doesn't work - @Progi1984 GH-70 PowerPoint2007 Writer : AutoFitNormal works with options (fontScale & lineSpacingReduction) - @Progi1984 @desigennaro GH-71 PowerPoint2007 Writer : Shadow don't work for RichTextShapes - @Progi1984 GH-81 PowerPoint2007 Writer : Visibility of the Title doesn't work - @Progi1984 GH-107 Refactor findLayoutIndex to findLayoutId where it assumes the slideLayout order was sorted. IMPROVED: unit tests - @kenliau GH-95 Miscellaneous Improved the sample 04-Table for having a Text Run in a Cell - @Progi1984 GH-84 Improved the sample 04-Table for having two links in a Cell - @Progi1984 GH-93 Improved the documentation about Table Shapes and cell width - @Progi1984 GH-104 Some parts of code shared between PHPOffice projects have been moved to PhpOffice/Common - @Progi1984 Refactored the PowerPoint97 Reader for managing the group shape and improving evolutions - @Progi1984 GH-110 Added a sample (12) for PowerPoint97 Reader with tree of the PhpPowerPoint object - @Progi1984 GH-110","title":"0.4.0"},{"location":"changes/0.4.0.html#040-2015-07-07","text":"","title":"0.4.0 - 2015-07-07"},{"location":"changes/0.4.0.html#features","text":"Added support for grouping shapes together in a Group - @Pr0phet GH-68 Added support for calculating the offset and extent on a Slide. - @Pr0phet GH-68 Added support for Horizontal bar chart - @rdoepke @Progi1984 GH-58 Added support for hyperlink on picture (ODPresentation & PowerPoint2007) - @Progi1984 GH-49 Added support for hyperlink on richtext (PowerPoint2007) - @JewrassicPark GH-49 Added support for notes slide (ODPresentation & PowerPoint2007) - @Progi1984 @JewrassicPark GH-63 Added option for explosion in Pie3D Chart (ODPresentation & PowerPoint2007) - @Progi1984 GH-76 ODPresentation Writer : Support for fill in RichText - @Progi1984 GH-79 ODPresentation Writer : Support for border style in RichText - @Progi1984 GH-79 ODPresentation Writer : Support for Area Chart - @Progi1984 GH-82 PowerPoint2007 Writer : Support for Area Chart - @Progi1984 GH-82 ODPresentation Writer : Support for Bar Chart - @Progi1984 GH-82 PowerPoint2007 Writer : Support for Bar Chart - @Progi1984 GH-82 Added units in DocumentLayout - @Progi1984 GH-87 Added support for transitions between slides - @Progi1984 ODPresentation Writer : Support for Pie Chart & Stack Percent Bar Charts - @jrking4 GH-108 PowerPoint2007 Writer : Support for Pie Chart & Stack Percent Bar Charts - @jrking4 GH-108","title":"Features"},{"location":"changes/0.4.0.html#bugfix","text":"PSR-0 via composer broken - @Progi1984 GH-51 ODPresentation Writer : Title in Legend in chart doesn't displayed - @Progi1984 GH-79 ODPresentation Writer : Segments in Pie3D Chart are now in clockwise order, as in PowerPoint2007 Writer - @Progi1984 GH-79 ODPresentation Writer : Axis in Line Chart have not tick marks displayed, as in PowerPoint2007 Writer - @Progi1984 GH-79 ODPresentation Writer : Shadow don't work for RichTextShapes - @Progi1984 GH-81 PowerPoint2007 Writer : Fill don't work for RichTextShapes - @Progi1984 GH-61 PowerPoint2007 Writer : Border don't work for RichTextShapes - @Progi1984 GH-61 PowerPoint2007 Writer : Hyperlink in table doesn't work - @Progi1984 GH-70 PowerPoint2007 Writer : AutoFitNormal works with options (fontScale & lineSpacingReduction) - @Progi1984 @desigennaro GH-71 PowerPoint2007 Writer : Shadow don't work for RichTextShapes - @Progi1984 GH-81 PowerPoint2007 Writer : Visibility of the Title doesn't work - @Progi1984 GH-107 Refactor findLayoutIndex to findLayoutId where it assumes the slideLayout order was sorted. IMPROVED: unit tests - @kenliau GH-95","title":"Bugfix"},{"location":"changes/0.4.0.html#miscellaneous","text":"Improved the sample 04-Table for having a Text Run in a Cell - @Progi1984 GH-84 Improved the sample 04-Table for having two links in a Cell - @Progi1984 GH-93 Improved the documentation about Table Shapes and cell width - @Progi1984 GH-104 Some parts of code shared between PHPOffice projects have been moved to PhpOffice/Common - @Progi1984 Refactored the PowerPoint97 Reader for managing the group shape and improving evolutions - @Progi1984 GH-110 Added a sample (12) for PowerPoint97 Reader with tree of the PhpPowerPoint object - @Progi1984 GH-110","title":"Miscellaneous"},{"location":"changes/0.5.0.html","text":"0.5.0 - 2015-10-08 Features PowerPoint2007 Reader : Initial Commit - @Progi1984 GH-44 ODPresentation Reader : Initial Commit - @Progi1984 GH-113 Bugfix Fixed the sample in Readme.md - @Progi1984 GH-114 Changes PhpOffice\\PhpPowerpoint becomes PhpOffice\\PhpPresentation - @Progi1984 GH-25 PhpOffice\\PhpPowerpoint\\Style\\Font::setStriketrough has been removed : Use setStrikethrough - @Progi1984 PhpOffice\\PhpPowerpoint\\AbstractShape::getSlide has been removed - @Progi1984 PhpOffice\\PhpPowerpoint\\AbstractShape::setSlide has been removed - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::getLayoutXmilli has been removed : getCX(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::getLayoutYmilli has been removed : getCY(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::setLayoutXmilli has been removed : setCX(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::setLayoutYmilli has been removed : setCY(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 Update the dependence PhpOffice\\Common to 0.2.* - @Progi1984 Migrated Travis CI to legacy - @Progi1984 GH-115","title":"0.5.0"},{"location":"changes/0.5.0.html#050-2015-10-08","text":"","title":"0.5.0 - 2015-10-08"},{"location":"changes/0.5.0.html#features","text":"PowerPoint2007 Reader : Initial Commit - @Progi1984 GH-44 ODPresentation Reader : Initial Commit - @Progi1984 GH-113","title":"Features"},{"location":"changes/0.5.0.html#bugfix","text":"Fixed the sample in Readme.md - @Progi1984 GH-114","title":"Bugfix"},{"location":"changes/0.5.0.html#changes","text":"PhpOffice\\PhpPowerpoint becomes PhpOffice\\PhpPresentation - @Progi1984 GH-25 PhpOffice\\PhpPowerpoint\\Style\\Font::setStriketrough has been removed : Use setStrikethrough - @Progi1984 PhpOffice\\PhpPowerpoint\\AbstractShape::getSlide has been removed - @Progi1984 PhpOffice\\PhpPowerpoint\\AbstractShape::setSlide has been removed - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::getLayoutXmilli has been removed : getCX(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::getLayoutYmilli has been removed : getCY(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::setLayoutXmilli has been removed : setCX(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 PhpOffice\\PhpPowerpoint\\DocumentLayout::setLayoutYmilli has been removed : setCY(DocumentLayout::UNIT_MILLIMETER) - @Progi1984 Update the dependence PhpOffice\\Common to 0.2.* - @Progi1984 Migrated Travis CI to legacy - @Progi1984 GH-115","title":"Changes"},{"location":"changes/0.6.0.html","text":"0.6.0 - 2016-01-24 Bugfix Documentation : Fixes in the rename of PHPPowerPoint - @Progi1984 GH-127 ODPresentation : Exclude SVM files for reader - @Progi1984 GH-141 PowerPoint2007 Writer : Bugfix for opening PPTX on Mac - @thsteinmetz GH-89 Changes PhpOffice\\PhpPresentation\\getProperties has been deprecated for PhpOffice\\PhpPresentation\\getDocumentProperties - @Progi1984 GH-154 PhpOffice\\PhpPresentation\\setProperties has been deprecated for PhpOffice\\PhpPresentation\\setDocumentProperties - @Progi1984 GH-154 PhpOffice\\PhpPowerpoint\\Style\\Alignment::setLevel can now be defined great than 8 - @Progi1984 GH-141 Features ODPresentation Reader/Writer : Name of the slide - @Progi1984 GH-121 ODPresentation Reader/Writer : Slide Background Color or Image - @Progi1984 GH-152 PowerPoint2007 Reader : Support for Layout Name - @Progi1984 GH-144 PowerPoint2007 Reader/Writer : Mark as final - @Progi1984 GH-118 PowerPoint2007 Reader/Writer : Set default zoom value for presentation - @Progi1984 GH-122 PowerPoint2007 Reader/Writer : Slide Background Color or Image - @Progi1984 GH-152 PowerPoint2007 Reader/Writer : Add Properties for allowing loop continuously until 'Esc' - @Progi1984 GH-154","title":"0.6.0"},{"location":"changes/0.6.0.html#060-2016-01-24","text":"","title":"0.6.0 - 2016-01-24"},{"location":"changes/0.6.0.html#bugfix","text":"Documentation : Fixes in the rename of PHPPowerPoint - @Progi1984 GH-127 ODPresentation : Exclude SVM files for reader - @Progi1984 GH-141 PowerPoint2007 Writer : Bugfix for opening PPTX on Mac - @thsteinmetz GH-89","title":"Bugfix"},{"location":"changes/0.6.0.html#changes","text":"PhpOffice\\PhpPresentation\\getProperties has been deprecated for PhpOffice\\PhpPresentation\\getDocumentProperties - @Progi1984 GH-154 PhpOffice\\PhpPresentation\\setProperties has been deprecated for PhpOffice\\PhpPresentation\\setDocumentProperties - @Progi1984 GH-154 PhpOffice\\PhpPowerpoint\\Style\\Alignment::setLevel can now be defined great than 8 - @Progi1984 GH-141","title":"Changes"},{"location":"changes/0.6.0.html#features","text":"ODPresentation Reader/Writer : Name of the slide - @Progi1984 GH-121 ODPresentation Reader/Writer : Slide Background Color or Image - @Progi1984 GH-152 PowerPoint2007 Reader : Support for Layout Name - @Progi1984 GH-144 PowerPoint2007 Reader/Writer : Mark as final - @Progi1984 GH-118 PowerPoint2007 Reader/Writer : Set default zoom value for presentation - @Progi1984 GH-122 PowerPoint2007 Reader/Writer : Slide Background Color or Image - @Progi1984 GH-152 PowerPoint2007 Reader/Writer : Add Properties for allowing loop continuously until 'Esc' - @Progi1984 GH-154","title":"Features"},{"location":"changes/0.7.0.html","text":"0.7.0 - 2016-09-12 Bugfix Fixed the image project - @mvargasmoran GH-177 PowerPoint2007 Writer : Bugfix for printing slide notes - @JewrassicPark @Progi1984 GH-179 Changes PhpOffice\\PhpPresentation\\Writer\\ODPresentation : Move to Design Pattern Decorator - @Progi1984 PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007 : Move to Design Pattern Decorator - @Progi1984 PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\getData has been deprecated for PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\getSeries - @Progi1984 GH-169 PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\setData has been deprecated for PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\setSeries - @Progi1984 GH-169 Added documentation for chart series (font, outline, marker) - @Progi1984 GH-169 Internal Structure for Drawing Shape - @Progi1984 GH-192 Documentation about manual installation - @danielbair GH-254 Features ODPresentation & PowerPoint2007 Writer : Add support for Comment - @Progi1984 GH-116 ODPresentation & PowerPoint2007 Writer : Thumbnail of the presentation - @Progi1984 GH-125 ODPresentation & PowerPoint2007 Writer : Add support for Gridlines in Chart - @Progi1984 GH-129 ODPresentation & PowerPoint2007 Writer : Support for images in base 64 - @Progi1984 GH-168 ODPresentation & PowerPoint2007 Writer : Marker of Series in Line & Scatter chart is customizable - @Progi1984 GH-169 ODPresentation & PowerPoint2007 Writer : Outline of Series in Line & Scatter chart is customizable - @Progi1984 GH-169 ODPresentation & PowerPoint2007 & Serialized Writer : Support for Zip Adapter - @Progi1984 GH-176 ODPresentation & PowerPoint2007 Writer : language property to TextElement - @skrajewski & @Progi1984 GH-180 ODPresentation & PowerPoint2007 Writer : Add Font Support For Chart Axis - @jrking4 GH-186 ODPresentation & PowerPoint2007 Writer : Support for video - @Progi1984 GH-123 ODPresentation & PowerPoint2007 Writer : Support for Visibility for slides - @Progi1984 PowerPoint2007 Reader : Layout Management - @vincentKool @Progi1984 GH-161 PowerPoint2007 Reader : Slide size - @loverslcn @Progi1984 GH-246 PowerPoint2007 Reader : Bullet Color - @Progi1984 GH-257 PowerPoint2007 Reader : Line Spacing - @Progi1984 GH-257 PowerPoint2007 Writer : Presentation with predefined View Type - @Progi1984 GH-120 PowerPoint2007 Writer : Implement alpha channel to Fills - @Dayjo GH-203 PowerPoint2007 Writer : Implement Animations - @JewrassicPark GH-214 PowerPoint2007 Writer : Layout Management - @vincentKool @Progi1984 GH-161 PowerPoint2007 Writer : Bullet Color - @piotrbelina GH-249 PowerPoint2007 Writer : Line Spacing - @piotrbelina GH-249","title":"0.7.0"},{"location":"changes/0.7.0.html#070-2016-09-12","text":"","title":"0.7.0 - 2016-09-12"},{"location":"changes/0.7.0.html#bugfix","text":"Fixed the image project - @mvargasmoran GH-177 PowerPoint2007 Writer : Bugfix for printing slide notes - @JewrassicPark @Progi1984 GH-179","title":"Bugfix"},{"location":"changes/0.7.0.html#changes","text":"PhpOffice\\PhpPresentation\\Writer\\ODPresentation : Move to Design Pattern Decorator - @Progi1984 PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007 : Move to Design Pattern Decorator - @Progi1984 PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\getData has been deprecated for PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\getSeries - @Progi1984 GH-169 PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\setData has been deprecated for PhpOffice\\PhpPresentation\\Shape\\Type\\AbstracType\\setSeries - @Progi1984 GH-169 Added documentation for chart series (font, outline, marker) - @Progi1984 GH-169 Internal Structure for Drawing Shape - @Progi1984 GH-192 Documentation about manual installation - @danielbair GH-254","title":"Changes"},{"location":"changes/0.7.0.html#features","text":"ODPresentation & PowerPoint2007 Writer : Add support for Comment - @Progi1984 GH-116 ODPresentation & PowerPoint2007 Writer : Thumbnail of the presentation - @Progi1984 GH-125 ODPresentation & PowerPoint2007 Writer : Add support for Gridlines in Chart - @Progi1984 GH-129 ODPresentation & PowerPoint2007 Writer : Support for images in base 64 - @Progi1984 GH-168 ODPresentation & PowerPoint2007 Writer : Marker of Series in Line & Scatter chart is customizable - @Progi1984 GH-169 ODPresentation & PowerPoint2007 Writer : Outline of Series in Line & Scatter chart is customizable - @Progi1984 GH-169 ODPresentation & PowerPoint2007 & Serialized Writer : Support for Zip Adapter - @Progi1984 GH-176 ODPresentation & PowerPoint2007 Writer : language property to TextElement - @skrajewski & @Progi1984 GH-180 ODPresentation & PowerPoint2007 Writer : Add Font Support For Chart Axis - @jrking4 GH-186 ODPresentation & PowerPoint2007 Writer : Support for video - @Progi1984 GH-123 ODPresentation & PowerPoint2007 Writer : Support for Visibility for slides - @Progi1984 PowerPoint2007 Reader : Layout Management - @vincentKool @Progi1984 GH-161 PowerPoint2007 Reader : Slide size - @loverslcn @Progi1984 GH-246 PowerPoint2007 Reader : Bullet Color - @Progi1984 GH-257 PowerPoint2007 Reader : Line Spacing - @Progi1984 GH-257 PowerPoint2007 Writer : Presentation with predefined View Type - @Progi1984 GH-120 PowerPoint2007 Writer : Implement alpha channel to Fills - @Dayjo GH-203 PowerPoint2007 Writer : Implement Animations - @JewrassicPark GH-214 PowerPoint2007 Writer : Layout Management - @vincentKool @Progi1984 GH-161 PowerPoint2007 Writer : Bullet Color - @piotrbelina GH-249 PowerPoint2007 Writer : Line Spacing - @piotrbelina GH-249","title":"Features"},{"location":"changes/0.8.0.html","text":"0.8.0 - 2017-04-03 Bugfix PowerPoint2007 Writer : Fixed the marker on line chart when symbol is none - @Napryc GH-211 PowerPoint2007 Writer : Fixed the format value in Pie Chart - @Napryc GH-212 PowerPoint2007 Writer : The presentation need repairs on Mac @jrking4 GH-266 PowerPoint2007 Writer : Fix for PowerPoint2007 Writer (Need repair) @Progi1984 GH-266 PowerPoint2007 Writer : Fixed the axis title in bar chart - @pgee70 GH-267 PowerPoint2007 Writer : Fixed the label position in bar chart - @pgee70 GH-268 PowerPoint2007 Writer : Support of margins in cell in table - @carlosafonso @Progi1984 GH-273 Fixed the corruption of file when an addExternalSlide is called - @Progi1984 GH-240 Changes Misc : Added two methods for setting Border & Fill in Legend - @Progi1984 GH-265 Features ODPresentation Writer : Show/Hide Value / Name / Series Name in Chart - @Progi1984 GH-272 ODPresentation Writer : Axis Bounds in Chart - @Progi1984 GH-269 PowerPoint97 Reader : Support of Slide Note - @Progi1984 GH-226 PowerPoint2007 Reader : Support of Shape Table - @Progi1984 GH-240 PowerPoint2007 Reader : Support of Slide Note - @Progi1984 GH-226 PowerPoint2007 Reader : Support text direction in Alignment for Table - @Progi1984 GH-218 PowerPoint2007 Writer : Implement character spacing - @jvanoostrom GH-301 PowerPoint2007 Writer : Axis Bounds in Chart - @Progi1984 GH-269 PowerPoint2007 Writer : Implement Legend Key in Series for Chart - @Progi1984 GH-319 PowerPoint2007 Writer : Support text direction in Alignment for Table - @SeregPie GH-218 PowerPoint2007 Writer : Support tick mark & unit in Axis for Chart - @Faab GH-218 PowerPoint2007 Writer : Support separator in Series for Chart - @jphchaput GH-218 PowerPoint2007 Writer : Add support for Outline in Axis - @Progi1984 GH-255 PowerPoint2007 Writer : Support autoscale for Chart - @Progi1984 GH-293","title":"0.8.0"},{"location":"changes/0.8.0.html#080-2017-04-03","text":"","title":"0.8.0 - 2017-04-03"},{"location":"changes/0.8.0.html#bugfix","text":"PowerPoint2007 Writer : Fixed the marker on line chart when symbol is none - @Napryc GH-211 PowerPoint2007 Writer : Fixed the format value in Pie Chart - @Napryc GH-212 PowerPoint2007 Writer : The presentation need repairs on Mac @jrking4 GH-266 PowerPoint2007 Writer : Fix for PowerPoint2007 Writer (Need repair) @Progi1984 GH-266 PowerPoint2007 Writer : Fixed the axis title in bar chart - @pgee70 GH-267 PowerPoint2007 Writer : Fixed the label position in bar chart - @pgee70 GH-268 PowerPoint2007 Writer : Support of margins in cell in table - @carlosafonso @Progi1984 GH-273 Fixed the corruption of file when an addExternalSlide is called - @Progi1984 GH-240","title":"Bugfix"},{"location":"changes/0.8.0.html#changes","text":"Misc : Added two methods for setting Border & Fill in Legend - @Progi1984 GH-265","title":"Changes"},{"location":"changes/0.8.0.html#features","text":"ODPresentation Writer : Show/Hide Value / Name / Series Name in Chart - @Progi1984 GH-272 ODPresentation Writer : Axis Bounds in Chart - @Progi1984 GH-269 PowerPoint97 Reader : Support of Slide Note - @Progi1984 GH-226 PowerPoint2007 Reader : Support of Shape Table - @Progi1984 GH-240 PowerPoint2007 Reader : Support of Slide Note - @Progi1984 GH-226 PowerPoint2007 Reader : Support text direction in Alignment for Table - @Progi1984 GH-218 PowerPoint2007 Writer : Implement character spacing - @jvanoostrom GH-301 PowerPoint2007 Writer : Axis Bounds in Chart - @Progi1984 GH-269 PowerPoint2007 Writer : Implement Legend Key in Series for Chart - @Progi1984 GH-319 PowerPoint2007 Writer : Support text direction in Alignment for Table - @SeregPie GH-218 PowerPoint2007 Writer : Support tick mark & unit in Axis for Chart - @Faab GH-218 PowerPoint2007 Writer : Support separator in Series for Chart - @jphchaput GH-218 PowerPoint2007 Writer : Add support for Outline in Axis - @Progi1984 GH-255 PowerPoint2007 Writer : Support autoscale for Chart - @Progi1984 GH-293","title":"Features"},{"location":"changes/0.9.0.html","text":"0.9.0 - 2017-07-05 Bugfix PowerPoint2007 Writer : Margins in table cell - @Progi1984 GH-347 Changes PowerPoint2007 Writer : Write percentage values with a trailing percent sign instead of formatted as 1000th of a percent to comply with the standard - @k42b3 GH-307 Features PowerPoint2007 Writer : Implemented XSD validation test case according to the ECMA/ISO standard - @k42b3 GH-307 PowerPoint2007 Writer : Implement visibility for axis - @kw-pr @Progi1984 GH-356 PowerPoint2007 Writer : Implement gap width in Bar(3D) Charts - @Progi1984 GH-358","title":"0.9.0"},{"location":"changes/0.9.0.html#090-2017-07-05","text":"","title":"0.9.0 - 2017-07-05"},{"location":"changes/0.9.0.html#bugfix","text":"PowerPoint2007 Writer : Margins in table cell - @Progi1984 GH-347","title":"Bugfix"},{"location":"changes/0.9.0.html#changes","text":"PowerPoint2007 Writer : Write percentage values with a trailing percent sign instead of formatted as 1000th of a percent to comply with the standard - @k42b3 GH-307","title":"Changes"},{"location":"changes/0.9.0.html#features","text":"PowerPoint2007 Writer : Implemented XSD validation test case according to the ECMA/ISO standard - @k42b3 GH-307 PowerPoint2007 Writer : Implement visibility for axis - @kw-pr @Progi1984 GH-356 PowerPoint2007 Writer : Implement gap width in Bar(3D) Charts - @Progi1984 GH-358","title":"Features"},{"location":"changes/1.0.0.html","text":"1.0.0 - WIP Bugfix PowerPoint2007 : Text is subscripted when set superscript to false - @qmachard GH-360 Core : Defining width & height of a shape don't return any error if width & height were equal to 0 - @surger GH-555 Changes Dropped support for HHVM - @sunspikes GH-556 PHP 7.1 is now supported - @Progi1984 GH-355 Added support PHP 7.4 to 8.0 & Removed support PHP < 7.1 - @Progi1984 GH-636 Removed deprecated methods/classes - @Progi1984 GH-650 Migrated use of PHPExcel to PhpSpreadsheet - @Progi1984 GH-652 PhpOffice\\PhpPresentation\\Style\\Color : Define only the transparency - @Progi1984 GH-370 PowerPoint2007 Reader : Background Color based on SchemeColor - @Progi1984 GH-397 PowerPoint2007 Reader : Support for hyperlinks under pictures - @ulziibuyan PowerPoint2007 Reader : Load images in their initial format (and not by default in PNG) - @polidog GH-553 Features ODPresentation Writer : Support for the position of Legend - @Progi1984 GH-355 ODPresentation Writer : Support for DoughnutChart - @Progi1984 GH-355 PowerPoint2007 Writer : Support for DoughnutChart - @Progi1984 GH-355 ODPresentation Reader : Support for fill for image - @Progi1984 GH-370 PowerPoint2007 Reader : Support for fill for image - @Progi1984 GH-370 ODPresentation Writer : Support for fill for transparent image - @Progi1984 GH-370 PowerPoint2007 Writer : Support for fill for transparent image - @JewrassicPark GH-370 Project Management Migrated from Travis CI to Github Actions - @Progi1984 GH-635 Enabled PHPStan - @Progi1984 GH-639 Enabled PHPCSFixer - @Progi1984 GH-637 Added link to Coveralls - @Progi1984 GH-648 Migrated from ReadTheDocs to MkDocs & Github Actions - @Progi1984 GH-647 Added Changelog to MkDocs - @Progi1984 GH-649 BC Breaks Classes have been strict typed PhpOffice\\PhpPresentation\\PhpPresentation Removed method getProperties() (replaced by getDocumentProperties() ) Removed method getZoom() (replaced by getPresentationProperties()->getZoom() ) Removed method isMarkedAsFinal() (replaced by getPresentationProperties()->isMarkedAsFinal() ) Removed method markAsFinal($state) (replaced by getPresentationProperties()->markAsFinal($state) ) Removed method setProperties($value) (replaced by setDocumentProperties() ) Removed method setZoom($zoom) (replaced by getPresentationProperties()->setZoom($zoom) ) PhpOffice\\PhpPresentation\\Shape\\Chart\\Type\\AbstractType Removed method getData() (replaced by getSeries() ) Removed method setData($value) (replaced by setSeries($value) ) PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007 Removed method getLayoutPack() Removed method setLayoutPack($pValue) PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007\\LayoutPack\\AbstractLayoutPack Removed class PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007\\LayoutPack\\PackDefault Removed class PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007\\LayoutPack\\TemplateBased Removed class","title":"1.0.0 (WIP)"},{"location":"changes/1.0.0.html#100-wip","text":"","title":"1.0.0 - WIP"},{"location":"changes/1.0.0.html#bugfix","text":"PowerPoint2007 : Text is subscripted when set superscript to false - @qmachard GH-360 Core : Defining width & height of a shape don't return any error if width & height were equal to 0 - @surger GH-555","title":"Bugfix"},{"location":"changes/1.0.0.html#changes","text":"Dropped support for HHVM - @sunspikes GH-556 PHP 7.1 is now supported - @Progi1984 GH-355 Added support PHP 7.4 to 8.0 & Removed support PHP < 7.1 - @Progi1984 GH-636 Removed deprecated methods/classes - @Progi1984 GH-650 Migrated use of PHPExcel to PhpSpreadsheet - @Progi1984 GH-652 PhpOffice\\PhpPresentation\\Style\\Color : Define only the transparency - @Progi1984 GH-370 PowerPoint2007 Reader : Background Color based on SchemeColor - @Progi1984 GH-397 PowerPoint2007 Reader : Support for hyperlinks under pictures - @ulziibuyan PowerPoint2007 Reader : Load images in their initial format (and not by default in PNG) - @polidog GH-553","title":"Changes"},{"location":"changes/1.0.0.html#features","text":"ODPresentation Writer : Support for the position of Legend - @Progi1984 GH-355 ODPresentation Writer : Support for DoughnutChart - @Progi1984 GH-355 PowerPoint2007 Writer : Support for DoughnutChart - @Progi1984 GH-355 ODPresentation Reader : Support for fill for image - @Progi1984 GH-370 PowerPoint2007 Reader : Support for fill for image - @Progi1984 GH-370 ODPresentation Writer : Support for fill for transparent image - @Progi1984 GH-370 PowerPoint2007 Writer : Support for fill for transparent image - @JewrassicPark GH-370","title":"Features"},{"location":"changes/1.0.0.html#project-management","text":"Migrated from Travis CI to Github Actions - @Progi1984 GH-635 Enabled PHPStan - @Progi1984 GH-639 Enabled PHPCSFixer - @Progi1984 GH-637 Added link to Coveralls - @Progi1984 GH-648 Migrated from ReadTheDocs to MkDocs & Github Actions - @Progi1984 GH-647 Added Changelog to MkDocs - @Progi1984 GH-649","title":"Project Management"},{"location":"changes/1.0.0.html#bc-breaks","text":"Classes have been strict typed PhpOffice\\PhpPresentation\\PhpPresentation Removed method getProperties() (replaced by getDocumentProperties() ) Removed method getZoom() (replaced by getPresentationProperties()->getZoom() ) Removed method isMarkedAsFinal() (replaced by getPresentationProperties()->isMarkedAsFinal() ) Removed method markAsFinal($state) (replaced by getPresentationProperties()->markAsFinal($state) ) Removed method setProperties($value) (replaced by setDocumentProperties() ) Removed method setZoom($zoom) (replaced by getPresentationProperties()->setZoom($zoom) ) PhpOffice\\PhpPresentation\\Shape\\Chart\\Type\\AbstractType Removed method getData() (replaced by getSeries() ) Removed method setData($value) (replaced by setSeries($value) ) PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007 Removed method getLayoutPack() Removed method setLayoutPack($pValue) PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007\\LayoutPack\\AbstractLayoutPack Removed class PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007\\LayoutPack\\PackDefault Removed class PhpOffice\\PhpPresentation\\Writer\\PowerPoint2007\\LayoutPack\\TemplateBased Removed class","title":"BC Breaks"},{"location":"usage/introduction.html","text":"General","title":"Introduction"},{"location":"usage/introduction.html#general","text":"","title":"General"},{"location":"usage/presentation.html","text":"Presentation Basic code The following is a basic example of the PHPPresentation library. More examples are provided in the samples folder . <?php $presentation = new PhpPresentation (); // Create slide $currentSlide = $presentation -> getActiveSlide (); // Create a shape (drawing) $shape = $currentSlide -> createDrawingShape (); $shape -> setName ( 'PHPPresentation logo' ) -> setDescription ( 'PHPPresentation logo' ) -> setPath ( './resources/phppresentation_logo.gif' ) -> setHeight ( 36 ) -> setOffsetX ( 10 ) -> setOffsetY ( 10 ); $shape -> getShadow () -> setVisible ( true ) -> setDirection ( 45 ) -> setDistance ( 10 ); // Create a shape (text) $shape = $currentSlide -> createRichTextShape () -> setHeight ( 300 ) -> setWidth ( 600 ) -> setOffsetX ( 170 ) -> setOffsetY ( 180 ); $shape -> getActiveParagraph () -> getAlignment () -> setHorizontal ( Alignment :: HORIZONTAL_CENTER ); $textRun = $shape -> createTextRun ( 'Thank you for using PHPPresentation!' ); $textRun -> getFont () -> setBold ( true ) -> setSize ( 60 ) -> setColor ( new Color ( 'FFE06B20' )); $writerPPTX = IOFactory :: createWriter ( $presentation , 'PowerPoint2007' ); $writerPPTX -> save ( __DIR__ . '/sample.pptx' ); $writerODP = IOFactory :: createWriter ( $presentation , 'ODPresentation' ); $writerODP -> save ( __DIR__ . '/sample.odp' ); Document information You can set the document information such as title, creator, and company name. Use the following functions: <?php $properties = $presentation -> getProperties (); $properties -> setCreator ( 'My name' ); $properties -> setCompany ( 'My factory' ); $properties -> setTitle ( 'My title' ); $properties -> setDescription ( 'My description' ); $properties -> setCategory ( 'My category' ); $properties -> setLastModifiedBy ( 'My name' ); $properties -> setCreated ( mktime ( 0 , 0 , 0 , 3 , 12 , 2014 )); $properties -> setModified ( mktime ( 0 , 0 , 0 , 3 , 14 , 2014 )); $properties -> setSubject ( 'My subject' ); $properties -> setKeywords ( 'my, key, word' ); Presentation Properties You can define some properties which are relative to the presentation, like the zoom or the thumbnail. Comments You can define if the presentation display or not the comments with the method setCommentVisible . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Get the display for comment var_export ( $properties -> isCommentVisible ()); // Output : false // Enable the display for comment $properties -> setCommentVisible ( true ); // Get the display for comment var_export ( $properties -> isCommentVisible ()); // Output : true Last View You can define the last view of the presentation with the method setLastView . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Get the last view of the presentation echo $properties -> getZoom (); // Output : PresentationProperties::VIEW_SLIDE // Set the last view of the presentation $properties -> setLastView ( PresentationProperties :: VIEW_NOTES ); // Get the last view of the presentation echo $properties -> getZoom (); // Output : PresentationProperties::VIEW_NOTES Mark as final You must define your presentation as final with the method markAsFinal() <?php // Default $state = $presentation -> isMarkedAsFinal (); // $state = false // Without parameter $presentation -> markAsFinal (); $state = $presentation -> isMarkedAsFinal (); // $state = true // Parameter = false $presentation -> markAsFinal ( false ); $state = $presentation -> isMarkedAsFinal (); // $state = false // Parameter = true $presentation -> markAsFinal ( true ); $state = $presentation -> isMarkedAsFinal (); // $state = true Thumbnail You can define the thumbnail of the presentation with the method setThumbnailPath . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Set path of the thumbnail $properties -> setThumbnailPath ( __DIR__ . '\\resources\\phppowerpoint_logo.gif' ); // Get path of the thumbnail echo $properties -> getThumbnailPath (); Zoom You can define the zoom of the presentation with the method setZoom . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Get zoom of the presentation echo $properties -> getZoom (); // Output : 1 // Set zoom of the presentation (3 = 300%) $properties -> setZoom ( 3 ); // Get zoom of the presentation echo $properties -> getZoom (); // Output : 3","title":"Presentation"},{"location":"usage/presentation.html#presentation","text":"","title":"Presentation"},{"location":"usage/presentation.html#basic-code","text":"The following is a basic example of the PHPPresentation library. More examples are provided in the samples folder . <?php $presentation = new PhpPresentation (); // Create slide $currentSlide = $presentation -> getActiveSlide (); // Create a shape (drawing) $shape = $currentSlide -> createDrawingShape (); $shape -> setName ( 'PHPPresentation logo' ) -> setDescription ( 'PHPPresentation logo' ) -> setPath ( './resources/phppresentation_logo.gif' ) -> setHeight ( 36 ) -> setOffsetX ( 10 ) -> setOffsetY ( 10 ); $shape -> getShadow () -> setVisible ( true ) -> setDirection ( 45 ) -> setDistance ( 10 ); // Create a shape (text) $shape = $currentSlide -> createRichTextShape () -> setHeight ( 300 ) -> setWidth ( 600 ) -> setOffsetX ( 170 ) -> setOffsetY ( 180 ); $shape -> getActiveParagraph () -> getAlignment () -> setHorizontal ( Alignment :: HORIZONTAL_CENTER ); $textRun = $shape -> createTextRun ( 'Thank you for using PHPPresentation!' ); $textRun -> getFont () -> setBold ( true ) -> setSize ( 60 ) -> setColor ( new Color ( 'FFE06B20' )); $writerPPTX = IOFactory :: createWriter ( $presentation , 'PowerPoint2007' ); $writerPPTX -> save ( __DIR__ . '/sample.pptx' ); $writerODP = IOFactory :: createWriter ( $presentation , 'ODPresentation' ); $writerODP -> save ( __DIR__ . '/sample.odp' );","title":"Basic code"},{"location":"usage/presentation.html#document-information","text":"You can set the document information such as title, creator, and company name. Use the following functions: <?php $properties = $presentation -> getProperties (); $properties -> setCreator ( 'My name' ); $properties -> setCompany ( 'My factory' ); $properties -> setTitle ( 'My title' ); $properties -> setDescription ( 'My description' ); $properties -> setCategory ( 'My category' ); $properties -> setLastModifiedBy ( 'My name' ); $properties -> setCreated ( mktime ( 0 , 0 , 0 , 3 , 12 , 2014 )); $properties -> setModified ( mktime ( 0 , 0 , 0 , 3 , 14 , 2014 )); $properties -> setSubject ( 'My subject' ); $properties -> setKeywords ( 'my, key, word' );","title":"Document information"},{"location":"usage/presentation.html#presentation-properties","text":"You can define some properties which are relative to the presentation, like the zoom or the thumbnail.","title":"Presentation Properties"},{"location":"usage/presentation.html#comments","text":"You can define if the presentation display or not the comments with the method setCommentVisible . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Get the display for comment var_export ( $properties -> isCommentVisible ()); // Output : false // Enable the display for comment $properties -> setCommentVisible ( true ); // Get the display for comment var_export ( $properties -> isCommentVisible ()); // Output : true","title":"Comments"},{"location":"usage/presentation.html#last-view","text":"You can define the last view of the presentation with the method setLastView . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Get the last view of the presentation echo $properties -> getZoom (); // Output : PresentationProperties::VIEW_SLIDE // Set the last view of the presentation $properties -> setLastView ( PresentationProperties :: VIEW_NOTES ); // Get the last view of the presentation echo $properties -> getZoom (); // Output : PresentationProperties::VIEW_NOTES","title":"Last View"},{"location":"usage/presentation.html#mark-as-final","text":"You must define your presentation as final with the method markAsFinal() <?php // Default $state = $presentation -> isMarkedAsFinal (); // $state = false // Without parameter $presentation -> markAsFinal (); $state = $presentation -> isMarkedAsFinal (); // $state = true // Parameter = false $presentation -> markAsFinal ( false ); $state = $presentation -> isMarkedAsFinal (); // $state = false // Parameter = true $presentation -> markAsFinal ( true ); $state = $presentation -> isMarkedAsFinal (); // $state = true","title":"Mark as final"},{"location":"usage/presentation.html#thumbnail","text":"You can define the thumbnail of the presentation with the method setThumbnailPath . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Set path of the thumbnail $properties -> setThumbnailPath ( __DIR__ . '\\resources\\phppowerpoint_logo.gif' ); // Get path of the thumbnail echo $properties -> getThumbnailPath ();","title":"Thumbnail"},{"location":"usage/presentation.html#zoom","text":"You can define the zoom of the presentation with the method setZoom . <?php $presentation = new PhpPresentation (); $properties = $presentation -> getPresentationProperties (); // Get zoom of the presentation echo $properties -> getZoom (); // Output : 1 // Set zoom of the presentation (3 = 300%) $properties -> setZoom ( 3 ); // Get zoom of the presentation echo $properties -> getZoom (); // Output : 3","title":"Zoom"},{"location":"usage/readers.html","text":"Readers ODPresentation The name of the reader is ODPresentation . <?php $reader = IOFactory :: createReader ( 'ODPresentation' ); $reader -> load ( __DIR__ . '/sample.odp' ); PowerPoint97 The name of the reader is PowerPoint97 . <?php $reader = IOFactory :: createReader ( 'PowerPoint97' ); $reader -> load ( __DIR__ . '/sample.ppt' ); PowerPoint2007 The name of the reader is PowerPoint2007 . <?php $reader = IOFactory :: createReader ( 'PowerPoint2007' ); $reader -> load ( __DIR__ . '/sample.pptx' ); Serialized The name of the reader is Serialized . <?php $reader = IOFactory :: createReader ( 'Serialized' ); $reader -> load ( __DIR__ . '/sample.phppt' );","title":"Readers"},{"location":"usage/readers.html#readers","text":"","title":"Readers"},{"location":"usage/readers.html#odpresentation","text":"The name of the reader is ODPresentation . <?php $reader = IOFactory :: createReader ( 'ODPresentation' ); $reader -> load ( __DIR__ . '/sample.odp' );","title":"ODPresentation"},{"location":"usage/readers.html#powerpoint97","text":"The name of the reader is PowerPoint97 . <?php $reader = IOFactory :: createReader ( 'PowerPoint97' ); $reader -> load ( __DIR__ . '/sample.ppt' );","title":"PowerPoint97"},{"location":"usage/readers.html#powerpoint2007","text":"The name of the reader is PowerPoint2007 . <?php $reader = IOFactory :: createReader ( 'PowerPoint2007' ); $reader -> load ( __DIR__ . '/sample.pptx' );","title":"PowerPoint2007"},{"location":"usage/readers.html#serialized","text":"The name of the reader is Serialized . <?php $reader = IOFactory :: createReader ( 'Serialized' ); $reader -> load ( __DIR__ . '/sample.phppt' );","title":"Serialized"},{"location":"usage/styles.html","text":"Styles Fill Use this style to define fill of a shape as example below. <?php $shape -> getFill () -> setFillType ( Fill :: FILL_GRADIENT_LINEAR ) -> setRotation ( 270 ) -> setStartColor ( new Color ( 'FFCCCCCC' )) -> setEndColor ( new Color ( 'FFFFFFFF' )); Properties: fillType rotation startColor endColor Border Use this style to define border of a shape as example below. .. code-block:: php $shape->getBorder() ->setLineStyle(Border::LINE_SINGLE) ->setLineWidth(4) ->getColor()->setARGB('FFC00000'); Properties: lineWidth lineStyle dashStyle color Shadow Use this style to define shadow of a shape as example below. <?php $shape -> getShadow () -> setVisible ( true ) -> setDirection ( 45 ) -> setDistance ( 10 ); Properties: visible blurRadius distance direction alignment color alpha Alignment horizontal vertical level indent marginLeft marginRight Font name bold italic superScript subScript underline strikethrough color Bullet bulletType bulletFont bulletChar bulletNumericStyle bulletNumericStartAt Color Colors can be applied to different objects, e.g. font or border. <?php $textRun = $shape -> createTextRun ( 'Text' ); $textRun -> getFont () -> setColor ( new Color ( 'C00000' ));","title":"Styles"},{"location":"usage/styles.html#styles","text":"","title":"Styles"},{"location":"usage/styles.html#fill","text":"Use this style to define fill of a shape as example below. <?php $shape -> getFill () -> setFillType ( Fill :: FILL_GRADIENT_LINEAR ) -> setRotation ( 270 ) -> setStartColor ( new Color ( 'FFCCCCCC' )) -> setEndColor ( new Color ( 'FFFFFFFF' )); Properties: fillType rotation startColor endColor","title":"Fill"},{"location":"usage/styles.html#border","text":"Use this style to define border of a shape as example below. .. code-block:: php $shape->getBorder() ->setLineStyle(Border::LINE_SINGLE) ->setLineWidth(4) ->getColor()->setARGB('FFC00000'); Properties: lineWidth lineStyle dashStyle color","title":"Border"},{"location":"usage/styles.html#shadow","text":"Use this style to define shadow of a shape as example below. <?php $shape -> getShadow () -> setVisible ( true ) -> setDirection ( 45 ) -> setDistance ( 10 ); Properties: visible blurRadius distance direction alignment color alpha","title":"Shadow"},{"location":"usage/styles.html#alignment","text":"horizontal vertical level indent marginLeft marginRight","title":"Alignment"},{"location":"usage/styles.html#font","text":"name bold italic superScript subScript underline strikethrough color","title":"Font"},{"location":"usage/styles.html#bullet","text":"bulletType bulletFont bulletChar bulletNumericStyle bulletNumericStartAt","title":"Bullet"},{"location":"usage/styles.html#color","text":"Colors can be applied to different objects, e.g. font or border. <?php $textRun = $shape -> createTextRun ( 'Text' ); $textRun -> getFont () -> setColor ( new Color ( 'C00000' ));","title":"Color"},{"location":"usage/writers.html","text":"Writers ODPresentation The name of the writer is ODPresentation . <?php $writer = IOFactory :: createWriter ( $oPhpPresentation , 'PowerPoint2007' ); $writer -> save ( __DIR__ . '/sample.pptx' ); PowerPoint2007 The name of the writer is PowerPoint2007 . <?php $writer = IOFactory :: createWriter ( $oPhpPresentation , 'PowerPoint2007' ); $writer -> save ( __DIR__ . '/sample.pptx' ); You can change the ZIP Adapter for the writer. By default, the ZIP Adapter is ZipArchiveAdapter . <?php use PhpOffice\\Common\\Adapter\\Zip\\PclZipAdapter ; use PhpOffice\\Common\\Adapter\\Zip\\ZipArchiveAdapter ; $writer = IOFactory :: createWriter ( $oPhpPresentation , 'PowerPoint2007' ); $writer -> setZipAdapter ( new PclZipAdapter ()); $writer -> save ( __DIR__ . '/sample.pptx' ); Serialized The name of the writer is Serialized . <?php $writer = IOFactory :: createWriter ( $oPhpPresentation , 'Serialized' ); $writer -> save ( __DIR__ . '/sample.phppt' ); You can change the ZIP Adapter for the writer. By default, the ZIP Adapter is ZipArchiveAdapter . <?php use PhpOffice\\Common\\Adapter\\Zip\\PclZipAdapter ; use PhpOffice\\Common\\Adapter\\Zip\\ZipArchiveAdapter ; $writer = IOFactory :: createWriter ( $oPhpPresentation , 'Serialized' ); $writer -> setZipAdapter ( new PclZipAdapter ()); $writer -> save ( __DIR__ . '/sample.phppt' );","title":"Writers"},{"location":"usage/writers.html#writers","text":"","title":"Writers"},{"location":"usage/writers.html#odpresentation","text":"The name of the writer is ODPresentation . <?php $writer = IOFactory :: createWriter ( $oPhpPresentation , 'PowerPoint2007' ); $writer -> save ( __DIR__ . '/sample.pptx' );","title":"ODPresentation"},{"location":"usage/writers.html#powerpoint2007","text":"The name of the writer is PowerPoint2007 . <?php $writer = IOFactory :: createWriter ( $oPhpPresentation , 'PowerPoint2007' ); $writer -> save ( __DIR__ . '/sample.pptx' ); You can change the ZIP Adapter for the writer. By default, the ZIP Adapter is ZipArchiveAdapter . <?php use PhpOffice\\Common\\Adapter\\Zip\\PclZipAdapter ; use PhpOffice\\Common\\Adapter\\Zip\\ZipArchiveAdapter ; $writer = IOFactory :: createWriter ( $oPhpPresentation , 'PowerPoint2007' ); $writer -> setZipAdapter ( new PclZipAdapter ()); $writer -> save ( __DIR__ . '/sample.pptx' );","title":"PowerPoint2007"},{"location":"usage/writers.html#serialized","text":"The name of the writer is Serialized . <?php $writer = IOFactory :: createWriter ( $oPhpPresentation , 'Serialized' ); $writer -> save ( __DIR__ . '/sample.phppt' ); You can change the ZIP Adapter for the writer. By default, the ZIP Adapter is ZipArchiveAdapter . <?php use PhpOffice\\Common\\Adapter\\Zip\\PclZipAdapter ; use PhpOffice\\Common\\Adapter\\Zip\\ZipArchiveAdapter ; $writer = IOFactory :: createWriter ( $oPhpPresentation , 'Serialized' ); $writer -> setZipAdapter ( new PclZipAdapter ()); $writer -> save ( __DIR__ . '/sample.phppt' );","title":"Serialized"},{"location":"usage/shapes/chart.html","text":"Charts To create a chart, use createChartShape method of Slide. <?php $chartShape = $slide -> createChartShape (); Parts Axis You can define gridlines (minor and major) for each axis (X & Y). For each gridline, you can custom the width (in points), the fill type and the fill color. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Gridlines ; $line = new Line (); $gridlines = new Gridlines (); $gridlines -> getOutline () -> setWidth ( 10 ); $gridlines -> getOutline () -> getFill () -> setFillType ( Fill :: FILL_SOLID ) -> setStartColor ( new Color ( Color :: COLOR_BLUE )); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> setMajorGridlines ( $gridlines ); For Axis, you can define the min & max bounds with setMinBounds & setMaxBounds methods. For resetting them, you pass null as parameter to these methods. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Gridlines ; $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> setMinBounds ( 0 ); $shape -> getPlotArea () -> getAxisX () -> setMaxBounds ( 200 ); You can define outline for each axis (X & Y). <?php $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> getOutline () -> setWidth ( 10 ); $shape -> getPlotArea () -> getAxisX () -> getOutline () -> getFill () -> setFillType ( Fill :: FILL_SOLID ) -> setStartColor ( new Color ( Color :: COLOR_BLUE )); For Axis Y, you can define tick mark with setMinorTickMark & setMajorTickMark methods. For resetting them, you pass Axis::TICK_MARK_NONE as parameter to these methods. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Axis ; $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisY () -> setMinorTickMark ( Axis :: TICK_MARK_NONE ); $shape -> getPlotArea () -> getAxisY () -> setMajorTickMark ( Axis :: TICK_MARK_INSIDE ); For Axis Y, you can define unit with setMinorUnit & setMajorUnit methods. For resetting them, you pass null as parameter to these methods. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Axis ; $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisY () -> setMinorUnit ( null ); $shape -> getPlotArea () -> getAxisY () -> setMajorUnit ( 0.05 ); You can define visibility for each axis (X & Y). <?php $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> setIsVisible ( false ); Title By default, the title of a chart is displayed. For hiding it, you define its visibility to false. <?php $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); // Hide the title $shape -> getTitle () -> setVisible ( false ); Series You can custom the font of a serie. <?php $series = new Series ( 'Downloads' , $seriesData ); // Define the size $series -> getFont () -> setSize ( 25 ); You can custom the marker of a serie, for Line & Scatter charts. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Marker ; $series = new Series ( 'Downloads' , $seriesData ); $marker = $series -> getMarker (); $marker -> setSymbol ( Marker :: SYMBOL_DASH ) -> setSize ( 10 ); You can custom the line of a serie, for Line & Scatter charts. <?php use \\PhpOffice\\PhpPresentation\\Style\\Outline ; $outline = new Outline (); // Define the color $outline -> getFill () -> setFillType ( Fill :: FILL_SOLID ); $outline -> getFill () -> setStartColor ( new Color ( Color :: COLOR_YELLOW )); // Define the width (in points) $outline -> setWidth ( 2 ); $series = new Series ( 'Downloads' , $seriesData ); $series -> setOutline ( $outline ); You can define the position of the data label. Each position is described in MSDN . <?php $series = new Series ( 'Downloads' , $seriesData ); $series -> setLabelPosition ( Series :: LABEL_INSIDEEND ); You can define if some informations are displayed. <?php $series = new Series ( 'Downloads' , $seriesData ); $series -> setSeparator ( ';' ); $series -> setShowCategoryName ( true ); $series -> setShowLeaderLines ( true ); $series -> setShowLegendKey ( true ); $series -> setShowPercentage ( true ); $series -> setShowSeriesName ( true ); $series -> setShowValue ( true ); View3D For enabling the autoscale for a shape, you must reset the height percent. <?php $shape -> getView3D () -> setHeightPercent ( null ); Types Area TODO Bar & Bar3D Gap Width You can define the gap width between bar or columns clusters. It is defined in percent. The default value is 150%. The value must be defined between 0 and 500. <?php $barChart = new Bar (); $barChart -> setGapWidthPercent ( 250 ); Stacking You can stack multiples series in a same chart. After adding multiples series, you can define the bar grouping with setBarGrouping method of AbstractTypeBar. <?php $barChart = new Bar (); $barChart -> addSeries ( $series1 ); $barChart -> addSeries ( $series2 ); $barChart -> addSeries ( $series3 ); $barChart -> setBarGrouping ( Bar :: GROUPING_CLUSTERED ); // OR $barChart -> setBarGrouping ( Bar :: GROUPING_STACKED ); // OR $barChart -> setBarGrouping ( Bar :: GROUPING_PERCENTSTACKED ); Bar::GROUPING_CLUSTERED Bar::GROUPING_STACKED Bar::GROUPING_PERCENTSTACKED Line TODO Pie & Pie3D TODO Scatter TODO","title":"Chart"},{"location":"usage/shapes/chart.html#charts","text":"To create a chart, use createChartShape method of Slide. <?php $chartShape = $slide -> createChartShape ();","title":"Charts"},{"location":"usage/shapes/chart.html#parts","text":"","title":"Parts"},{"location":"usage/shapes/chart.html#axis","text":"You can define gridlines (minor and major) for each axis (X & Y). For each gridline, you can custom the width (in points), the fill type and the fill color. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Gridlines ; $line = new Line (); $gridlines = new Gridlines (); $gridlines -> getOutline () -> setWidth ( 10 ); $gridlines -> getOutline () -> getFill () -> setFillType ( Fill :: FILL_SOLID ) -> setStartColor ( new Color ( Color :: COLOR_BLUE )); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> setMajorGridlines ( $gridlines ); For Axis, you can define the min & max bounds with setMinBounds & setMaxBounds methods. For resetting them, you pass null as parameter to these methods. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Gridlines ; $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> setMinBounds ( 0 ); $shape -> getPlotArea () -> getAxisX () -> setMaxBounds ( 200 ); You can define outline for each axis (X & Y). <?php $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> getOutline () -> setWidth ( 10 ); $shape -> getPlotArea () -> getAxisX () -> getOutline () -> getFill () -> setFillType ( Fill :: FILL_SOLID ) -> setStartColor ( new Color ( Color :: COLOR_BLUE )); For Axis Y, you can define tick mark with setMinorTickMark & setMajorTickMark methods. For resetting them, you pass Axis::TICK_MARK_NONE as parameter to these methods. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Axis ; $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisY () -> setMinorTickMark ( Axis :: TICK_MARK_NONE ); $shape -> getPlotArea () -> getAxisY () -> setMajorTickMark ( Axis :: TICK_MARK_INSIDE ); For Axis Y, you can define unit with setMinorUnit & setMajorUnit methods. For resetting them, you pass null as parameter to these methods. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Axis ; $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisY () -> setMinorUnit ( null ); $shape -> getPlotArea () -> getAxisY () -> setMajorUnit ( 0.05 ); You can define visibility for each axis (X & Y). <?php $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); $shape -> getPlotArea () -> getAxisX () -> setIsVisible ( false );","title":"Axis"},{"location":"usage/shapes/chart.html#title","text":"By default, the title of a chart is displayed. For hiding it, you define its visibility to false. <?php $line = new Line (); $shape = $slide -> createChartShape (); $shape -> getPlotArea () -> setType ( $line ); // Hide the title $shape -> getTitle () -> setVisible ( false );","title":"Title"},{"location":"usage/shapes/chart.html#series","text":"You can custom the font of a serie. <?php $series = new Series ( 'Downloads' , $seriesData ); // Define the size $series -> getFont () -> setSize ( 25 ); You can custom the marker of a serie, for Line & Scatter charts. <?php use \\PhpOffice\\PhpPresentation\\Shape\\Chart\\Marker ; $series = new Series ( 'Downloads' , $seriesData ); $marker = $series -> getMarker (); $marker -> setSymbol ( Marker :: SYMBOL_DASH ) -> setSize ( 10 ); You can custom the line of a serie, for Line & Scatter charts. <?php use \\PhpOffice\\PhpPresentation\\Style\\Outline ; $outline = new Outline (); // Define the color $outline -> getFill () -> setFillType ( Fill :: FILL_SOLID ); $outline -> getFill () -> setStartColor ( new Color ( Color :: COLOR_YELLOW )); // Define the width (in points) $outline -> setWidth ( 2 ); $series = new Series ( 'Downloads' , $seriesData ); $series -> setOutline ( $outline ); You can define the position of the data label. Each position is described in MSDN . <?php $series = new Series ( 'Downloads' , $seriesData ); $series -> setLabelPosition ( Series :: LABEL_INSIDEEND ); You can define if some informations are displayed. <?php $series = new Series ( 'Downloads' , $seriesData ); $series -> setSeparator ( ';' ); $series -> setShowCategoryName ( true ); $series -> setShowLeaderLines ( true ); $series -> setShowLegendKey ( true ); $series -> setShowPercentage ( true ); $series -> setShowSeriesName ( true ); $series -> setShowValue ( true );","title":"Series"},{"location":"usage/shapes/chart.html#view3d","text":"For enabling the autoscale for a shape, you must reset the height percent. <?php $shape -> getView3D () -> setHeightPercent ( null );","title":"View3D"},{"location":"usage/shapes/chart.html#types","text":"","title":"Types"},{"location":"usage/shapes/chart.html#area","text":"TODO","title":"Area"},{"location":"usage/shapes/chart.html#bar-bar3d","text":"","title":"Bar &amp; Bar3D"},{"location":"usage/shapes/chart.html#gap-width","text":"You can define the gap width between bar or columns clusters. It is defined in percent. The default value is 150%. The value must be defined between 0 and 500. <?php $barChart = new Bar (); $barChart -> setGapWidthPercent ( 250 );","title":"Gap Width"},{"location":"usage/shapes/chart.html#stacking","text":"You can stack multiples series in a same chart. After adding multiples series, you can define the bar grouping with setBarGrouping method of AbstractTypeBar. <?php $barChart = new Bar (); $barChart -> addSeries ( $series1 ); $barChart -> addSeries ( $series2 ); $barChart -> addSeries ( $series3 ); $barChart -> setBarGrouping ( Bar :: GROUPING_CLUSTERED ); // OR $barChart -> setBarGrouping ( Bar :: GROUPING_STACKED ); // OR $barChart -> setBarGrouping ( Bar :: GROUPING_PERCENTSTACKED ); Bar::GROUPING_CLUSTERED Bar::GROUPING_STACKED Bar::GROUPING_PERCENTSTACKED","title":"Stacking"},{"location":"usage/shapes/chart.html#line","text":"TODO","title":"Line"},{"location":"usage/shapes/chart.html#pie-pie3d","text":"TODO","title":"Pie &amp; Pie3D"},{"location":"usage/shapes/chart.html#scatter","text":"TODO","title":"Scatter"},{"location":"usage/shapes/comment.html","text":"Comments To create a comment, create an object Comment . <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; $comment = new Comment (); $slide -> addShape ( $comment ); You can define text and date with setters. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; $comment = new Comment (); $comment -> setText ( 'Text of the Comment' ); $comment -> setDate ( time ()); $slide -> addShape ( $comment ); Author For a comment, you can define the author. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; use PhpOffice\\PhpPresentation\\Shape\\Comment\\Author ; $author = new Author (); $comment = new Comment (); $comment -> setAuthor ( $author ); $slide -> addShape ( $comment ); You can define name and initials with setters. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; use PhpOffice\\PhpPresentation\\Shape\\Comment\\Author ; $author = new Author (); $author -> setName ( 'Name of the author' ); $author -> setInitals ( 'Nota' ); $comment = new Comment (); $comment -> setAuthor ( $author ); $slide -> addShape ( $comment );","title":"Comment"},{"location":"usage/shapes/comment.html#comments","text":"To create a comment, create an object Comment . <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; $comment = new Comment (); $slide -> addShape ( $comment ); You can define text and date with setters. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; $comment = new Comment (); $comment -> setText ( 'Text of the Comment' ); $comment -> setDate ( time ()); $slide -> addShape ( $comment );","title":"Comments"},{"location":"usage/shapes/comment.html#author","text":"For a comment, you can define the author. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; use PhpOffice\\PhpPresentation\\Shape\\Comment\\Author ; $author = new Author (); $comment = new Comment (); $comment -> setAuthor ( $author ); $slide -> addShape ( $comment ); You can define name and initials with setters. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Comment ; use PhpOffice\\PhpPresentation\\Shape\\Comment\\Author ; $author = new Author (); $author -> setName ( 'Name of the author' ); $author -> setInitals ( 'Nota' ); $comment = new Comment (); $comment -> setAuthor ( $author ); $slide -> addShape ( $comment );","title":"Author"},{"location":"usage/shapes/drawing.html","text":"Drawing To create a drawing, you have four sources : File, GD, Base64 and ZipFile. File To create a drawing, use createDrawingShape method of slide. <?php $shape = $slide -> createDrawingShape (); $shape -> setName ( 'Unique name' ) -> setDescription ( 'Description of the drawing' ) -> setPath ( '/path/to/drawing.filename' ); It's an alias for : <?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\File ; $shape = new File (); $shape -> setName ( 'Unique name' ) -> setDescription ( 'Description of the drawing' ) -> setPath ( '/path/to/drawing.filename' ); $slide -> addShape ( $shape ); Base64 <?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\Base64 ; $shape = new Base64 (); $shape -> setName ( 'Sample image' ) -> setDescription ( 'Sample image' ) -> setImageResource ( $gdImage ) -> setData ( 'data:image/jpeg;base64,..........' ); $slide -> addShape ( $shape ); GD <?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\Gd ; $gdImage = imagecreatetruecolor ( $width , $height ); $shape = new Gd (); $shape -> setName ( 'Sample image' ) -> setDescription ( 'Sample image' ) -> setImageResource ( $gdImage ) -> setRenderingFunction ( Drawing\\Gd :: RENDERING_JPEG ) -> setMimeType ( Drawing\\Gd :: MIMETYPE_DEFAULT ); $slide -> addShape ( $shape ); ZipFile <?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\ZipFile ; $shape = new ZipFile (); $shape -> setName ( 'Sample image' ) -> setDescription ( 'Sample image' ) -> setPath ( 'zip://myzipfile.zip#path/in/zip/img.ext' ) $slide -> addShape ( $shape );","title":"Drawing"},{"location":"usage/shapes/drawing.html#drawing","text":"To create a drawing, you have four sources : File, GD, Base64 and ZipFile.","title":"Drawing"},{"location":"usage/shapes/drawing.html#file","text":"To create a drawing, use createDrawingShape method of slide. <?php $shape = $slide -> createDrawingShape (); $shape -> setName ( 'Unique name' ) -> setDescription ( 'Description of the drawing' ) -> setPath ( '/path/to/drawing.filename' ); It's an alias for : <?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\File ; $shape = new File (); $shape -> setName ( 'Unique name' ) -> setDescription ( 'Description of the drawing' ) -> setPath ( '/path/to/drawing.filename' ); $slide -> addShape ( $shape );","title":"File"},{"location":"usage/shapes/drawing.html#base64","text":"<?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\Base64 ; $shape = new Base64 (); $shape -> setName ( 'Sample image' ) -> setDescription ( 'Sample image' ) -> setImageResource ( $gdImage ) -> setData ( 'data:image/jpeg;base64,..........' ); $slide -> addShape ( $shape );","title":"Base64"},{"location":"usage/shapes/drawing.html#gd","text":"<?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\Gd ; $gdImage = imagecreatetruecolor ( $width , $height ); $shape = new Gd (); $shape -> setName ( 'Sample image' ) -> setDescription ( 'Sample image' ) -> setImageResource ( $gdImage ) -> setRenderingFunction ( Drawing\\Gd :: RENDERING_JPEG ) -> setMimeType ( Drawing\\Gd :: MIMETYPE_DEFAULT ); $slide -> addShape ( $shape );","title":"GD"},{"location":"usage/shapes/drawing.html#zipfile","text":"<?php use PhpOffice\\PhpPresentation\\Shape\\Drawing\\ZipFile ; $shape = new ZipFile (); $shape -> setName ( 'Sample image' ) -> setDescription ( 'Sample image' ) -> setPath ( 'zip://myzipfile.zip#path/in/zip/img.ext' ) $slide -> addShape ( $shape );","title":"ZipFile"},{"location":"usage/shapes/introduction.html","text":"Shapes Shapes are objects that can be added to a slide. There are five types of shapes that can be used, i.e. rich text , line , chart , drawing , and table . Read the corresponding section of this manual for detail information of each shape. Every shapes have common properties that you can set by using fluent interface. width in pixels height in pixels offsetX in pixels offsetY in pixels rotation in degrees fill see Fill border see Border shadow see Shadow hyperlink Example: <?php $richtext = $slide -> createRichTextShape () -> setHeight ( 300 ) -> setWidth ( 600 ) -> setOffsetX ( 170 ) -> setOffsetY ( 180 ); Line To create a line, use createLineShape method of slide.","title":"Introduction"},{"location":"usage/shapes/introduction.html#shapes","text":"Shapes are objects that can be added to a slide. There are five types of shapes that can be used, i.e. rich text , line , chart , drawing , and table . Read the corresponding section of this manual for detail information of each shape. Every shapes have common properties that you can set by using fluent interface. width in pixels height in pixels offsetX in pixels offsetY in pixels rotation in degrees fill see Fill border see Border shadow see Shadow hyperlink Example: <?php $richtext = $slide -> createRichTextShape () -> setHeight ( 300 ) -> setWidth ( 600 ) -> setOffsetX ( 170 ) -> setOffsetY ( 180 );","title":"Shapes"},{"location":"usage/shapes/introduction.html#line","text":"To create a line, use createLineShape method of slide.","title":"Line"},{"location":"usage/shapes/media.html","text":"Media To create a video, create an object Media . Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Media ; $media = new Media (); $media -> setPath ( 'file.wmv' ); // $media->setPath('file.ogv'); $slide -> addShape ( $media ); You can define text and date with setters. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Media ; $media = new Media (); $media -> setName ( 'Name of the Media' ); $slide -> addShape ( $media ); Quirks For Windows readers, the prefered file format is WMV. For Linux readers, the prefered file format is OGV.","title":"Media"},{"location":"usage/shapes/media.html#media","text":"To create a video, create an object Media . Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Media ; $media = new Media (); $media -> setPath ( 'file.wmv' ); // $media->setPath('file.ogv'); $slide -> addShape ( $media ); You can define text and date with setters. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\Media ; $media = new Media (); $media -> setName ( 'Name of the Media' ); $slide -> addShape ( $media );","title":"Media"},{"location":"usage/shapes/media.html#quirks","text":"For Windows readers, the prefered file format is WMV. For Linux readers, the prefered file format is OGV.","title":"Quirks"},{"location":"usage/shapes/richtext.html","text":"RichText Rich text shapes contain paragraphs of texts. To create a rich text shape, use createRichTextShape method of slide. Below are the properties that you can set for a rich text shape. wrap autoFit fontScale : font scale (in percentage) when autoFit = RichText::AUTOFIT_NORMAL lnSpcReduction : line spacing reduction (in percentage) when autoFit = RichText::AUTOFIT_NORMAL horizontalOverflow verticalOverflow upright vertical columns bottomInset in pixels leftInset in pixels rightInset in pixels topInset in pixels autoShrinkHorizontal (boolean) autoShrinkVertical (boolean) Properties that can be set for each paragraphs are as follow. alignment bulletStyle see Bullet lineSpacing see LineSpacing font Bullet For a paragraph, you can define the bullet style. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Paragraph ; use PhpOffice\\PhpPresentation\\Style\\Bullet ; $paragraph = new Paragraph (); $paragraph -> getBulletStyle (); With the bullet style, you can define the char, the font, the color and the type. <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Paragraph ; use PhpOffice\\PhpPresentation\\Style\\Bullet ; use PhpOffice\\PhpPresentation\\Style\\Color ; $paragraph = new Paragraph (); $paragraph -> getBulletStyle () -> setBulletChar ( '-' ); $paragraph -> getBulletStyle () -> setBulletType ( Bullet :: TYPE_BULLET ); $paragraph -> getBulletStyle () -> setBulletColor ( new Color ( Color :: COLOR_RED )); LineSpacing For a paragraph, you can define the line spacing. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Paragraph ; $paragraph = new Paragraph (); $paragraph -> setLineSpacing ( 200 ); $lineSpacing = $paragraph -> getLineSpacing (); Run For a run, you can define the language. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Run ; $run = new Run (); $run -> setLanguage ( 'fr-FR' );","title":"Richtext"},{"location":"usage/shapes/richtext.html#richtext","text":"Rich text shapes contain paragraphs of texts. To create a rich text shape, use createRichTextShape method of slide. Below are the properties that you can set for a rich text shape. wrap autoFit fontScale : font scale (in percentage) when autoFit = RichText::AUTOFIT_NORMAL lnSpcReduction : line spacing reduction (in percentage) when autoFit = RichText::AUTOFIT_NORMAL horizontalOverflow verticalOverflow upright vertical columns bottomInset in pixels leftInset in pixels rightInset in pixels topInset in pixels autoShrinkHorizontal (boolean) autoShrinkVertical (boolean) Properties that can be set for each paragraphs are as follow. alignment bulletStyle see Bullet lineSpacing see LineSpacing font","title":"RichText"},{"location":"usage/shapes/richtext.html#bullet","text":"For a paragraph, you can define the bullet style. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Paragraph ; use PhpOffice\\PhpPresentation\\Style\\Bullet ; $paragraph = new Paragraph (); $paragraph -> getBulletStyle (); With the bullet style, you can define the char, the font, the color and the type. <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Paragraph ; use PhpOffice\\PhpPresentation\\Style\\Bullet ; use PhpOffice\\PhpPresentation\\Style\\Color ; $paragraph = new Paragraph (); $paragraph -> getBulletStyle () -> setBulletChar ( '-' ); $paragraph -> getBulletStyle () -> setBulletType ( Bullet :: TYPE_BULLET ); $paragraph -> getBulletStyle () -> setBulletColor ( new Color ( Color :: COLOR_RED ));","title":"Bullet"},{"location":"usage/shapes/richtext.html#linespacing","text":"For a paragraph, you can define the line spacing. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Paragraph ; $paragraph = new Paragraph (); $paragraph -> setLineSpacing ( 200 ); $lineSpacing = $paragraph -> getLineSpacing ();","title":"LineSpacing"},{"location":"usage/shapes/richtext.html#run","text":"For a run, you can define the language. Example: <?php use PhpOffice\\PhpPresentation\\Shape\\RichText\\Run ; $run = new Run (); $run -> setLanguage ( 'fr-FR' );","title":"Run"},{"location":"usage/shapes/table.html","text":"Tables To create a table, use createTableShape method of slide. Example: <?php $tableShape = $slide -> createTableShape ( $columns ); Rows A row is a child of a table. For creating a row, use createRow method of a Table shape. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); Cells A cell is a child of a row. You can access cell objects with nextCell method of a Row object. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); // Get the first cell $cellA1 = $row -> nextCell (); // Get the second cell $cellA2 = $row -> nextCell (); You can access cell object directly. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); // Get the first cell $cellA1 = $row -> getCell ( 0 ); // Get the second cell $cellA2 = $row -> getCell ( 1 ); Define margins Margins of cells are defined by margins of the first paragraph of cell. Margins of cells are defined in pixels. For defining margins of cell, you can use the setMargin* method of a Alignment object of the active paragraph of a Cell object. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); $cellA1 = $row -> nextCell (); $cellA1 -> getActiveParagraph () -> getAlignment () -> setMarginBottom ( 20 ) -> setMarginLeft ( 40 ) -> setMarginRight ( 60 ) -> setMarginTop ( 80 ); Define the text direction For defining the text direction of cell, you can use the setTextDirection method of the getAlignment method of a Cell object. The width is in pixels. <?php use PhpOffice\\PhpPresentation\\Style\\Alignment ; $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); $cellA1 = $row -> nextCell (); $cellA1 -> getAlignment () -> setTextDirection ( Alignment :: TEXT_DIRECTION_VERTICAL_270 ); Define the width The width of cells are defined by the width of cell of the first row. If not defined, all cells widths are calculated from the width of the shape and the number of columns. For defining the width of cell, you can use the setWidth method of a Cell object. The width is in pixels. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); $cellA1 = $row -> nextCell (); $cellA1 -> setWidth ( 100 );","title":"Table"},{"location":"usage/shapes/table.html#tables","text":"To create a table, use createTableShape method of slide. Example: <?php $tableShape = $slide -> createTableShape ( $columns );","title":"Tables"},{"location":"usage/shapes/table.html#rows","text":"A row is a child of a table. For creating a row, use createRow method of a Table shape. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow ();","title":"Rows"},{"location":"usage/shapes/table.html#cells","text":"A cell is a child of a row. You can access cell objects with nextCell method of a Row object. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); // Get the first cell $cellA1 = $row -> nextCell (); // Get the second cell $cellA2 = $row -> nextCell (); You can access cell object directly. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); // Get the first cell $cellA1 = $row -> getCell ( 0 ); // Get the second cell $cellA2 = $row -> getCell ( 1 );","title":"Cells"},{"location":"usage/shapes/table.html#define-margins","text":"Margins of cells are defined by margins of the first paragraph of cell. Margins of cells are defined in pixels. For defining margins of cell, you can use the setMargin* method of a Alignment object of the active paragraph of a Cell object. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); $cellA1 = $row -> nextCell (); $cellA1 -> getActiveParagraph () -> getAlignment () -> setMarginBottom ( 20 ) -> setMarginLeft ( 40 ) -> setMarginRight ( 60 ) -> setMarginTop ( 80 );","title":"Define margins"},{"location":"usage/shapes/table.html#define-the-text-direction","text":"For defining the text direction of cell, you can use the setTextDirection method of the getAlignment method of a Cell object. The width is in pixels. <?php use PhpOffice\\PhpPresentation\\Style\\Alignment ; $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); $cellA1 = $row -> nextCell (); $cellA1 -> getAlignment () -> setTextDirection ( Alignment :: TEXT_DIRECTION_VERTICAL_270 );","title":"Define the text direction"},{"location":"usage/shapes/table.html#define-the-width","text":"The width of cells are defined by the width of cell of the first row. If not defined, all cells widths are calculated from the width of the shape and the number of columns. For defining the width of cell, you can use the setWidth method of a Cell object. The width is in pixels. <?php $tableShape = $slide -> createTableShape ( $columns ); $row = $tableShape -> createRow (); $cellA1 = $row -> nextCell (); $cellA1 -> setWidth ( 100 );","title":"Define the width"},{"location":"usage/slides/animation.html","text":"Animations You can create multiples animations in a slide. <?php use PhpOffice\\PhpPresentation\\Slide\\Animation ; $animation1 = new Animation (); $animation1 -> addShape ( $drawing ); $slide -> addAnimation ( $animation1 ); $animation2 = new Animation (); $animation2 -> addShape ( $richtext ); $slide -> addAnimation ( $animation2 );","title":"Animations"},{"location":"usage/slides/animation.html#animations","text":"You can create multiples animations in a slide. <?php use PhpOffice\\PhpPresentation\\Slide\\Animation ; $animation1 = new Animation (); $animation1 -> addShape ( $drawing ); $slide -> addAnimation ( $animation1 ); $animation2 = new Animation (); $animation2 -> addShape ( $richtext ); $slide -> addAnimation ( $animation2 );","title":"Animations"},{"location":"usage/slides/introduction.html","text":"Introduction Slides are pages in a presentation. Slides are stored as a zero based array in PHPPresentation object. Use the method createSlide to create a new slide and retrieve the slide for other operation such as creating shapes for that slide. Name By default, a slide has not a name. You can define it with the method setName . <?php $slide = $presentation -> createSlide (); $slide -> setName ( 'Title of the slide' ); Visibility By default, a slide is visible. You can define it with the method setIsVisible . <?php $slide = $presentation -> createSlide (); $slide -> setIsVisible ( false ); var_dump ( $slide -> isVisible ());","title":"Introduction"},{"location":"usage/slides/introduction.html#introduction","text":"Slides are pages in a presentation. Slides are stored as a zero based array in PHPPresentation object. Use the method createSlide to create a new slide and retrieve the slide for other operation such as creating shapes for that slide.","title":"Introduction"},{"location":"usage/slides/introduction.html#name","text":"By default, a slide has not a name. You can define it with the method setName . <?php $slide = $presentation -> createSlide (); $slide -> setName ( 'Title of the slide' );","title":"Name"},{"location":"usage/slides/introduction.html#visibility","text":"By default, a slide is visible. You can define it with the method setIsVisible . <?php $slide = $presentation -> createSlide (); $slide -> setIsVisible ( false ); var_dump ( $slide -> isVisible ());","title":"Visibility"},{"location":"usage/slides/layout.html","text":"Slides Layout A slide is a hierarchy of three components: The master slide upon which the slide is based : it specifies such properties as the font styles for the title, body, and footer, placeholder positions for text and objects, bullets styles, and background; The slide layout which is applied to the the slide : it permits to override what is specified in the master slide; The slide itself: it contains content and formatting that is not already specified by the master slide and the slide layout. Placeholders permit to link these three components together in order that the override is possible. Master slides You can access to all master slides with the method getAllMasterSlides or create one with createMasterSlide . <?php $arraySlideMasters = $presentation -> getAllMasterSlides (); $masterSlide = $presentation -> createMasterSlide (); Slides Layout You can access to all slide layout from a master with the method getAllSlideLayouts or create one with createSlideLayout . <?php $arraySlideLayouts = $masterSlide -> getAllSlideLayouts (); $slideLayout = $masterSlide -> createSlideLayout (); Placeholders For each master slide or slide layout, you can add any shape like on a slide. <?php $shape = $masterSlide -> createChartShape (); $shape = $slideLayout -> createTableShape (); You can define a shape as a placeholder for each level with the method setPlaceHolder . A shape defined in each level will have an override for its formatting in each level. <?php use PhpOffice\\PhpPresentation\\Shape\\Placeholder ; $shape -> setPlaceHolder ( new Placeholder ( Placeholder :: PH_TYPE_TITLE ));","title":"Layouts"},{"location":"usage/slides/layout.html#slides-layout","text":"A slide is a hierarchy of three components: The master slide upon which the slide is based : it specifies such properties as the font styles for the title, body, and footer, placeholder positions for text and objects, bullets styles, and background; The slide layout which is applied to the the slide : it permits to override what is specified in the master slide; The slide itself: it contains content and formatting that is not already specified by the master slide and the slide layout. Placeholders permit to link these three components together in order that the override is possible.","title":"Slides Layout"},{"location":"usage/slides/layout.html#master-slides","text":"You can access to all master slides with the method getAllMasterSlides or create one with createMasterSlide . <?php $arraySlideMasters = $presentation -> getAllMasterSlides (); $masterSlide = $presentation -> createMasterSlide ();","title":"Master slides"},{"location":"usage/slides/layout.html#slides-layout_1","text":"You can access to all slide layout from a master with the method getAllSlideLayouts or create one with createSlideLayout . <?php $arraySlideLayouts = $masterSlide -> getAllSlideLayouts (); $slideLayout = $masterSlide -> createSlideLayout ();","title":"Slides Layout"},{"location":"usage/slides/layout.html#placeholders","text":"For each master slide or slide layout, you can add any shape like on a slide. <?php $shape = $masterSlide -> createChartShape (); $shape = $slideLayout -> createTableShape (); You can define a shape as a placeholder for each level with the method setPlaceHolder . A shape defined in each level will have an override for its formatting in each level. <?php use PhpOffice\\PhpPresentation\\Shape\\Placeholder ; $shape -> setPlaceHolder ( new Placeholder ( Placeholder :: PH_TYPE_TITLE ));","title":"Placeholders"}]}